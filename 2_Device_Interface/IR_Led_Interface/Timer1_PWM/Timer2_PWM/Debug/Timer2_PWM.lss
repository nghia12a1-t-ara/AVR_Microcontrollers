
Timer2_PWM.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000ca  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000011e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000011e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000150  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000050  00000000  00000000  0000018c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000007b2  00000000  00000000  000001dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000062a  00000000  00000000  0000098e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000388  00000000  00000000  00000fb8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000094  00000000  00000000  00001340  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000360  00000000  00000000  000013d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000218  00000000  00000000  00001734  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000040  00000000  00000000  0000194c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 57 00 	call	0xae	; 0xae <main>
  64:	0c 94 63 00 	jmp	0xc6	; 0xc6 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <PWM_init>:

unsigned char UART_Read()
{
	while(bit_is_clear(UCSRA, RXC));
	return UDR;
}
  6c:	1f bc       	out	0x2f, r1	; 47
  6e:	1e bc       	out	0x2e, r1	; 46
  70:	8c 9a       	sbi	0x11, 4	; 17
  72:	8f b5       	in	r24, 0x2f	; 47
  74:	82 60       	ori	r24, 0x02	; 2
  76:	8f bd       	out	0x2f, r24	; 47
  78:	8e b5       	in	r24, 0x2e	; 46
  7a:	88 61       	ori	r24, 0x18	; 24
  7c:	8e bd       	out	0x2e, r24	; 46
  7e:	8f b5       	in	r24, 0x2f	; 47
  80:	80 62       	ori	r24, 0x20	; 32
  82:	8f bd       	out	0x2f, r24	; 47
  84:	8e b5       	in	r24, 0x2e	; 46
  86:	81 60       	ori	r24, 0x01	; 1
  88:	8e bd       	out	0x2e, r24	; 46
  8a:	85 ea       	ldi	r24, 0xA5	; 165
  8c:	91 e0       	ldi	r25, 0x01	; 1
  8e:	97 bd       	out	0x27, r25	; 39
  90:	86 bd       	out	0x26, r24	; 38
  92:	08 95       	ret

00000094 <UART_Init>:
  94:	83 e3       	ldi	r24, 0x33	; 51
  96:	89 b9       	out	0x09, r24	; 9
  98:	8a b1       	in	r24, 0x0a	; 10
  9a:	88 69       	ori	r24, 0x98	; 152
  9c:	8a b9       	out	0x0a, r24	; 10
  9e:	80 b5       	in	r24, 0x20	; 32
  a0:	86 60       	ori	r24, 0x06	; 6
  a2:	80 bd       	out	0x20, r24	; 32
  a4:	08 95       	ret

000000a6 <UART_Write_Chr>:
  a6:	5d 9b       	sbis	0x0b, 5	; 11
  a8:	fe cf       	rjmp	.-4      	; 0xa6 <UART_Write_Chr>
  aa:	8c b9       	out	0x0c, r24	; 12
  ac:	08 95       	ret

000000ae <main>:

int main(void)
{
	PWM_init();
  ae:	0e 94 36 00 	call	0x6c	; 0x6c <PWM_init>
	UART_Init();
  b2:	0e 94 4a 00 	call	0x94	; 0x94 <UART_Init>
	
	OCR1B = 210;
  b6:	82 ed       	ldi	r24, 0xD2	; 210
  b8:	90 e0       	ldi	r25, 0x00	; 0
  ba:	99 bd       	out	0x29, r25	; 41
  bc:	88 bd       	out	0x28, r24	; 40
	UART_Write_Chr('A');
  be:	81 e4       	ldi	r24, 0x41	; 65
  c0:	0e 94 53 00 	call	0xa6	; 0xa6 <UART_Write_Chr>
  c4:	ff cf       	rjmp	.-2      	; 0xc4 <main+0x16>

000000c6 <_exit>:
  c6:	f8 94       	cli

000000c8 <__stop_program>:
  c8:	ff cf       	rjmp	.-2      	; 0xc8 <__stop_program>
