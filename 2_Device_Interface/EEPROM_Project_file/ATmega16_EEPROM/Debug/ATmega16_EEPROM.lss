
ATmega16_EEPROM.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000234  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000010  00800060  00000234  000002a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000002b8  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000002e8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000c0  00000000  00000000  00000328  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000cb9  00000000  00000000  000003e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000757  00000000  00000000  000010a1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000665  00000000  00000000  000017f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000bc  00000000  00000000  00001e60  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003eb  00000000  00000000  00001f1c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000404  00000000  00000000  00002307  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000040  00000000  00000000  0000270b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 e3       	ldi	r30, 0x34	; 52
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 37       	cpi	r26, 0x70	; 112
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 41 00 	call	0x82	; 0x82 <main>
  7a:	0c 94 18 01 	jmp	0x230	; 0x230 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <main>:

// ghi mot chuoi ky tu vao cac o nho cua EEPROM 
// Doc cac ky tu do va in ra LCD

int main()
{
  82:	0f 93       	push	r16
  84:	1f 93       	push	r17
  86:	cf 93       	push	r28
  88:	df 93       	push	r29
  8a:	cd b7       	in	r28, 0x3d	; 61
  8c:	de b7       	in	r29, 0x3e	; 62
  8e:	a0 97       	sbiw	r28, 0x20	; 32
  90:	0f b6       	in	r0, 0x3f	; 63
  92:	f8 94       	cli
  94:	de bf       	out	0x3e, r29	; 62
  96:	0f be       	out	0x3f, r0	; 63
  98:	cd bf       	out	0x3d, r28	; 61
	char R_array[16], W_array[16] = "EEPROM TEST";
  9a:	8c e0       	ldi	r24, 0x0C	; 12
  9c:	e0 e6       	ldi	r30, 0x60	; 96
  9e:	f0 e0       	ldi	r31, 0x00	; 0
  a0:	de 01       	movw	r26, r28
  a2:	51 96       	adiw	r26, 0x11	; 17
  a4:	01 90       	ld	r0, Z+
  a6:	0d 92       	st	X+, r0
  a8:	8a 95       	dec	r24
  aa:	e1 f7       	brne	.-8      	; 0xa4 <main+0x22>
  ac:	fe 01       	movw	r30, r28
  ae:	7d 96       	adiw	r30, 0x1d	; 29
  b0:	84 e0       	ldi	r24, 0x04	; 4
  b2:	df 01       	movw	r26, r30
  b4:	1d 92       	st	X+, r1
  b6:	8a 95       	dec	r24
  b8:	e9 f7       	brne	.-6      	; 0xb4 <main+0x32>
	LCD_Init();
  ba:	0e 94 ba 00 	call	0x174	; 0x174 <LCD_Init>
	
	/* Gan gia tri cho 16 o nho lien tiep ma R_array tro toi = 'a'*/
	memset(R_array, 'a', 16);		//R_array[16] = "aaaaaaaaaaaaaaaa"
  be:	40 e1       	ldi	r20, 0x10	; 16
  c0:	50 e0       	ldi	r21, 0x00	; 0
  c2:	61 e6       	ldi	r22, 0x61	; 97
  c4:	70 e0       	ldi	r23, 0x00	; 0
  c6:	ce 01       	movw	r24, r28
  c8:	01 96       	adiw	r24, 0x01	; 1
  ca:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <memset>
	eeprom_busy_wait();							//  "EEPROM TESTaaaaa"
  ce:	e1 99       	sbic	0x1c, 1	; 28
  d0:	fe cf       	rjmp	.-4      	; 0xce <main+0x4c>
	
	/* Ghi gia tri vao EEPROM */		
	eeprom_write_block(W_array, 0, strlen(W_array));
  d2:	8e 01       	movw	r16, r28
  d4:	0f 5e       	subi	r16, 0xEF	; 239
  d6:	1f 4f       	sbci	r17, 0xFF	; 255
  d8:	f8 01       	movw	r30, r16
  da:	01 90       	ld	r0, Z+
  dc:	00 20       	and	r0, r0
  de:	e9 f7       	brne	.-6      	; 0xda <main+0x58>
  e0:	31 97       	sbiw	r30, 0x01	; 1
  e2:	af 01       	movw	r20, r30
  e4:	40 1b       	sub	r20, r16
  e6:	51 0b       	sbc	r21, r17
  e8:	60 e0       	ldi	r22, 0x00	; 0
  ea:	70 e0       	ldi	r23, 0x00	; 0
  ec:	c8 01       	movw	r24, r16
  ee:	0e 94 01 01 	call	0x202	; 0x202 <eeprom_write_block>
	
	/* Doc gia tri tu EEPROM va dat vao R_array */
	eeprom_read_block(R_array, 0, strlen(W_array));
  f2:	f8 01       	movw	r30, r16
  f4:	01 90       	ld	r0, Z+
  f6:	00 20       	and	r0, r0
  f8:	e9 f7       	brne	.-6      	; 0xf4 <main+0x72>
  fa:	31 97       	sbiw	r30, 0x01	; 1
  fc:	af 01       	movw	r20, r30
  fe:	40 1b       	sub	r20, r16
 100:	51 0b       	sbc	r21, r17
 102:	60 e0       	ldi	r22, 0x00	; 0
 104:	70 e0       	ldi	r23, 0x00	; 0
 106:	ce 01       	movw	r24, r28
 108:	01 96       	adiw	r24, 0x01	; 1
 10a:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <eeprom_read_block>
	
	LCD_String(R_array);					
 10e:	ce 01       	movw	r24, r28
 110:	01 96       	adiw	r24, 0x01	; 1
 112:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_String>
	return(0);
 116:	80 e0       	ldi	r24, 0x00	; 0
 118:	90 e0       	ldi	r25, 0x00	; 0
 11a:	a0 96       	adiw	r28, 0x20	; 32
 11c:	0f b6       	in	r0, 0x3f	; 63
 11e:	f8 94       	cli
 120:	de bf       	out	0x3e, r29	; 62
 122:	0f be       	out	0x3f, r0	; 63
 124:	cd bf       	out	0x3d, r28	; 61
 126:	df 91       	pop	r29
 128:	cf 91       	pop	r28
 12a:	1f 91       	pop	r17
 12c:	0f 91       	pop	r16
 12e:	08 95       	ret

00000130 <LCD_Command>:
#include "LCD_16x2_H_file.h"						/* Include LCD header file */


void LCD_Command (char cmd)							/* LCD command write function */
{
	LCD_Data_Port = cmd;							/* Write command data to LCD data port */
 130:	88 bb       	out	0x18, r24	; 24
	LCD_Command_Port &= ~((1<<RS)|(1<<RW));			/* Make RS LOW (command reg.), RW LOW (Write) */
 132:	85 b3       	in	r24, 0x15	; 21
 134:	89 7f       	andi	r24, 0xF9	; 249
 136:	85 bb       	out	0x15, r24	; 21
	LCD_Command_Port |= (1<<EN);					/* High to Low transition on EN (Enable) */
 138:	a8 9a       	sbi	0x15, 0	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 13a:	82 e0       	ldi	r24, 0x02	; 2
 13c:	8a 95       	dec	r24
 13e:	f1 f7       	brne	.-4      	; 0x13c <LCD_Command+0xc>
 140:	00 c0       	rjmp	.+0      	; 0x142 <LCD_Command+0x12>
	_delay_us(1);
	LCD_Command_Port &= ~(1<<EN);
 142:	a8 98       	cbi	0x15, 0	; 21
 144:	87 ec       	ldi	r24, 0xC7	; 199
 146:	90 e0       	ldi	r25, 0x00	; 0
 148:	01 97       	sbiw	r24, 0x01	; 1
 14a:	f1 f7       	brne	.-4      	; 0x148 <LCD_Command+0x18>
 14c:	00 c0       	rjmp	.+0      	; 0x14e <LCD_Command+0x1e>
 14e:	00 00       	nop
 150:	08 95       	ret

00000152 <LCD_Char>:
	_delay_us(100);									/* Wait little bit */
}

void LCD_Char (char char_data)						/* LCD data write function */
{
	LCD_Data_Port = char_data;						/* Write data to LCD data port */
 152:	88 bb       	out	0x18, r24	; 24
	LCD_Command_Port &= ~(1<<RW);					/* Make RW LOW (Write) */
 154:	a9 98       	cbi	0x15, 1	; 21
	LCD_Command_Port |= (1<<EN)|(1<<RS);			/* Make RS HIGH (data reg.) and High to Low transition on EN (Enable) */
 156:	85 b3       	in	r24, 0x15	; 21
 158:	85 60       	ori	r24, 0x05	; 5
 15a:	85 bb       	out	0x15, r24	; 21
 15c:	82 e0       	ldi	r24, 0x02	; 2
 15e:	8a 95       	dec	r24
 160:	f1 f7       	brne	.-4      	; 0x15e <LCD_Char+0xc>
 162:	00 c0       	rjmp	.+0      	; 0x164 <LCD_Char+0x12>
	_delay_us(1);
	LCD_Command_Port &= ~(1<<EN);
 164:	a8 98       	cbi	0x15, 0	; 21
 166:	87 ec       	ldi	r24, 0xC7	; 199
 168:	90 e0       	ldi	r25, 0x00	; 0
 16a:	01 97       	sbiw	r24, 0x01	; 1
 16c:	f1 f7       	brne	.-4      	; 0x16a <LCD_Char+0x18>
 16e:	00 c0       	rjmp	.+0      	; 0x170 <LCD_Char+0x1e>
 170:	00 00       	nop
 172:	08 95       	ret

00000174 <LCD_Init>:
	_delay_us(100);									/* Wait little bit */
}

void LCD_Init (void)								/* LCD Initialize function */
{
	LCD_Command_Dir |= (1<<RS)|(1<<RW)|(1<<EN);		/* Make LCD command port direction as o/p */
 174:	84 b3       	in	r24, 0x14	; 20
 176:	87 60       	ori	r24, 0x07	; 7
 178:	84 bb       	out	0x14, r24	; 20
	LCD_Data_Dir = 0xFF;							/* Make LCD data port direction as o/p */
 17a:	8f ef       	ldi	r24, 0xFF	; 255
 17c:	87 bb       	out	0x17, r24	; 23
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 17e:	8f e3       	ldi	r24, 0x3F	; 63
 180:	9c e9       	ldi	r25, 0x9C	; 156
 182:	01 97       	sbiw	r24, 0x01	; 1
 184:	f1 f7       	brne	.-4      	; 0x182 <LCD_Init+0xe>
 186:	00 c0       	rjmp	.+0      	; 0x188 <LCD_Init+0x14>
 188:	00 00       	nop
	
	_delay_ms(20);									/* LCD power up time to get things ready, it should always >15ms */
	LCD_Command (0x38);								/* Initialize 16X2 LCD in 8bit mode */
 18a:	88 e3       	ldi	r24, 0x38	; 56
 18c:	0e 94 98 00 	call	0x130	; 0x130 <LCD_Command>
	LCD_Command (0x0C);								/* Display ON, Cursor OFF command */
 190:	8c e0       	ldi	r24, 0x0C	; 12
 192:	0e 94 98 00 	call	0x130	; 0x130 <LCD_Command>
	LCD_Command (0x06);								/* Auto Increment cursor */
 196:	86 e0       	ldi	r24, 0x06	; 6
 198:	0e 94 98 00 	call	0x130	; 0x130 <LCD_Command>
	LCD_Command (0x01);								/* Clear LCD command */
 19c:	81 e0       	ldi	r24, 0x01	; 1
 19e:	0e 94 98 00 	call	0x130	; 0x130 <LCD_Command>
 1a2:	8f e9       	ldi	r24, 0x9F	; 159
 1a4:	9f e0       	ldi	r25, 0x0F	; 15
 1a6:	01 97       	sbiw	r24, 0x01	; 1
 1a8:	f1 f7       	brne	.-4      	; 0x1a6 <LCD_Init+0x32>
 1aa:	00 c0       	rjmp	.+0      	; 0x1ac <LCD_Init+0x38>
 1ac:	00 00       	nop
	_delay_ms(2);
	LCD_Command (0x80);								/* 8 is for first line and 0 is for 0th position */
 1ae:	80 e8       	ldi	r24, 0x80	; 128
 1b0:	0e 94 98 00 	call	0x130	; 0x130 <LCD_Command>
 1b4:	08 95       	ret

000001b6 <LCD_String>:
}

void LCD_String (char *str)							/* Send string to LCD function */
{
 1b6:	cf 93       	push	r28
 1b8:	df 93       	push	r29
 1ba:	ec 01       	movw	r28, r24
	int i;
	for(i=0;str[i]!=0;i++)							/* Send each char of string till the NULL */
 1bc:	88 81       	ld	r24, Y
 1be:	88 23       	and	r24, r24
 1c0:	31 f0       	breq	.+12     	; 0x1ce <LCD_String+0x18>
 1c2:	21 96       	adiw	r28, 0x01	; 1
	{
		LCD_Char (str[i]);							/* Call LCD data write */
 1c4:	0e 94 a9 00 	call	0x152	; 0x152 <LCD_Char>
}

void LCD_String (char *str)							/* Send string to LCD function */
{
	int i;
	for(i=0;str[i]!=0;i++)							/* Send each char of string till the NULL */
 1c8:	89 91       	ld	r24, Y+
 1ca:	81 11       	cpse	r24, r1
 1cc:	fb cf       	rjmp	.-10     	; 0x1c4 <LCD_String+0xe>
	{
		LCD_Char (str[i]);							/* Call LCD data write */
	}
}
 1ce:	df 91       	pop	r29
 1d0:	cf 91       	pop	r28
 1d2:	08 95       	ret

000001d4 <memset>:
 1d4:	dc 01       	movw	r26, r24
 1d6:	01 c0       	rjmp	.+2      	; 0x1da <memset+0x6>
 1d8:	6d 93       	st	X+, r22
 1da:	41 50       	subi	r20, 0x01	; 1
 1dc:	50 40       	sbci	r21, 0x00	; 0
 1de:	e0 f7       	brcc	.-8      	; 0x1d8 <memset+0x4>
 1e0:	08 95       	ret

000001e2 <eeprom_read_block>:
 1e2:	dc 01       	movw	r26, r24
 1e4:	cb 01       	movw	r24, r22

000001e6 <eeprom_read_blraw>:
 1e6:	fc 01       	movw	r30, r24
 1e8:	e1 99       	sbic	0x1c, 1	; 28
 1ea:	fe cf       	rjmp	.-4      	; 0x1e8 <eeprom_read_blraw+0x2>
 1ec:	06 c0       	rjmp	.+12     	; 0x1fa <eeprom_read_blraw+0x14>
 1ee:	ff bb       	out	0x1f, r31	; 31
 1f0:	ee bb       	out	0x1e, r30	; 30
 1f2:	e0 9a       	sbi	0x1c, 0	; 28
 1f4:	31 96       	adiw	r30, 0x01	; 1
 1f6:	0d b2       	in	r0, 0x1d	; 29
 1f8:	0d 92       	st	X+, r0
 1fa:	41 50       	subi	r20, 0x01	; 1
 1fc:	50 40       	sbci	r21, 0x00	; 0
 1fe:	b8 f7       	brcc	.-18     	; 0x1ee <eeprom_read_blraw+0x8>
 200:	08 95       	ret

00000202 <eeprom_write_block>:
 202:	dc 01       	movw	r26, r24
 204:	cb 01       	movw	r24, r22
 206:	03 c0       	rjmp	.+6      	; 0x20e <eeprom_write_block+0xc>
 208:	2d 91       	ld	r18, X+
 20a:	0e 94 0c 01 	call	0x218	; 0x218 <eeprom_write_r18>
 20e:	41 50       	subi	r20, 0x01	; 1
 210:	50 40       	sbci	r21, 0x00	; 0
 212:	d0 f7       	brcc	.-12     	; 0x208 <eeprom_write_block+0x6>
 214:	08 95       	ret

00000216 <eeprom_write_byte>:
 216:	26 2f       	mov	r18, r22

00000218 <eeprom_write_r18>:
 218:	e1 99       	sbic	0x1c, 1	; 28
 21a:	fe cf       	rjmp	.-4      	; 0x218 <eeprom_write_r18>
 21c:	9f bb       	out	0x1f, r25	; 31
 21e:	8e bb       	out	0x1e, r24	; 30
 220:	2d bb       	out	0x1d, r18	; 29
 222:	0f b6       	in	r0, 0x3f	; 63
 224:	f8 94       	cli
 226:	e2 9a       	sbi	0x1c, 2	; 28
 228:	e1 9a       	sbi	0x1c, 1	; 28
 22a:	0f be       	out	0x3f, r0	; 63
 22c:	01 96       	adiw	r24, 0x01	; 1
 22e:	08 95       	ret

00000230 <_exit>:
 230:	f8 94       	cli

00000232 <__stop_program>:
 232:	ff cf       	rjmp	.-2      	; 0x232 <__stop_program>
