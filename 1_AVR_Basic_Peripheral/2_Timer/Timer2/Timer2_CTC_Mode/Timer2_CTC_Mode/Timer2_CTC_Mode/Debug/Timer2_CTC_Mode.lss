
Timer2_CTC_Mode.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000098  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000000ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000000ec  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000011c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000158  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000056e  00000000  00000000  00000178  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000004f9  00000000  00000000  000006e6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000218  00000000  00000000  00000bdf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00000df8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002dd  00000000  00000000  00000e1c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000010  00000000  00000000  000010f9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 4a 00 	jmp	0x94	; 0x94 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#include <avr/io.h>
#include <util/delay.h>

int main(void)
{
    DDRD |= (1 << 7);
  6c:	8f 9a       	sbi	0x11, 7	; 17
	PORTD &= ~(1 << 7);		//PD7 = output
  6e:	97 98       	cbi	0x12, 7	; 18
	
    while (1) 
    {
		OCR2 = 69;
  70:	45 e4       	ldi	r20, 0x45	; 69
		TCCR2 = 0x39;
  72:	39 e3       	ldi	r19, 0x39	; 57
			// CTC, set on match, no prescaler
		while ((TIFR & (1 << OCF2)) == 0);		// monitor OCF2 flag 
		TIFR = (1 << OCF2);					// Clear OCF2 by writing 1
  74:	80 e8       	ldi	r24, 0x80	; 128
		OCR2 = 99;
  76:	23 e6       	ldi	r18, 0x63	; 99
		TCCR2 = 0x29;	
  78:	99 e2       	ldi	r25, 0x29	; 41
    DDRD |= (1 << 7);
	PORTD &= ~(1 << 7);		//PD7 = output
	
    while (1) 
    {
		OCR2 = 69;
  7a:	43 bd       	out	0x23, r20	; 35
		TCCR2 = 0x39;
  7c:	35 bd       	out	0x25, r19	; 37
			// CTC, set on match, no prescaler
		while ((TIFR & (1 << OCF2)) == 0);		// monitor OCF2 flag 
  7e:	08 b6       	in	r0, 0x38	; 56
  80:	07 fe       	sbrs	r0, 7
  82:	fd cf       	rjmp	.-6      	; 0x7e <main+0x12>
		TIFR = (1 << OCF2);					// Clear OCF2 by writing 1
  84:	88 bf       	out	0x38, r24	; 56
		OCR2 = 99;
  86:	23 bd       	out	0x23, r18	; 35
		TCCR2 = 0x29;	
  88:	95 bd       	out	0x25, r25	; 37
			// CTC, clear on match, no prescaler
		while ((TIFR & (1 << OCF2)) == 0);
  8a:	08 b6       	in	r0, 0x38	; 56
  8c:	07 fe       	sbrs	r0, 7
  8e:	fd cf       	rjmp	.-6      	; 0x8a <main+0x1e>
		TIFR = (1 << OCF2);					// Clear OCF2 by writing 1
  90:	88 bf       	out	0x38, r24	; 56
    }
  92:	f3 cf       	rjmp	.-26     	; 0x7a <main+0xe>

00000094 <_exit>:
  94:	f8 94       	cli

00000096 <__stop_program>:
  96:	ff cf       	rjmp	.-2      	; 0x96 <__stop_program>
