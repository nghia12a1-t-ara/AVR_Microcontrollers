
Watch_Dog.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000b6  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000010a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000010a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000013c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  00000178  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000005d1  00000000  00000000  000001b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000562  00000000  00000000  00000781  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000252  00000000  00000000  00000ce3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000060  00000000  00000000  00000f38  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002e5  00000000  00000000  00000f98  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000002f  00000000  00000000  0000127d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  000012ac  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 4c 00 	jmp	0x98	; 0x98 <__vector_2>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 3a 00 	call	0x74	; 0x74 <main>
  64:	0c 94 59 00 	jmp	0xb2	; 0xb2 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <WDT_OFF>:
void WDT_OFF()
{
	/*
	This function use for disable the watchdog timer.
	*/
	WDTCR = (1<<WDTOE)|(1<<WDE);
  6c:	88 e1       	ldi	r24, 0x18	; 24
  6e:	81 bd       	out	0x21, r24	; 33
	WDTCR = 0x00;
  70:	11 bc       	out	0x21, r1	; 33
  72:	08 95       	ret

00000074 <main>:
}

int main(void)
{	
	DDRD &= ~(1 << 3);
  74:	8b 98       	cbi	0x11, 3	; 17
	PORTD |= (1 << 3);
  76:	93 9a       	sbi	0x12, 3	; 18
	LED_DDR |= 0xC0;
  78:	81 b3       	in	r24, 0x11	; 17
  7a:	80 6c       	ori	r24, 0xC0	; 192
  7c:	81 bb       	out	0x11, r24	; 17
	
	// interrupt 1 set-up
	MCUCR |= (1 << ISC11);
  7e:	85 b7       	in	r24, 0x35	; 53
  80:	88 60       	ori	r24, 0x08	; 8
  82:	85 bf       	out	0x35, r24	; 53
	GICR |= (1 << INT1);
  84:	8b b7       	in	r24, 0x3b	; 59
  86:	80 68       	ori	r24, 0x80	; 128
  88:	8b bf       	out	0x3b, r24	; 59
	sei();
  8a:	78 94       	sei
{
	/*
	Watchdog timer enables with typical timeout period 2.1 
	second.
	*/
	WDTCR = (1<<WDE)|(1<<WDP2)|(1<<WDP1)|(1<<WDP0);
  8c:	cf e0       	ldi	r28, 0x0F	; 15
  8e:	c1 bd       	out	0x21, r28	; 33
	sei();

    while(1)
	{
		WDT_ON();		/* Enable the watchdog timer */
		LED_PORT |= (1<<6);	/* Set PD6 pin to logic high */
  90:	96 9a       	sbi	0x12, 6	; 18
		//_delay_ms(500);	/* Wait for 1 second */
		//LED_PORT &= ~(1<<6);	/* Clear PD6 pin */
		//_delay_ms(500);
		WDT_OFF();
  92:	0e 94 36 00 	call	0x6c	; 0x6c <WDT_OFF>
  96:	fb cf       	rjmp	.-10     	; 0x8e <main+0x1a>

00000098 <__vector_2>:
	}
}

ISR(INT1_vect)
{
  98:	1f 92       	push	r1
  9a:	0f 92       	push	r0
  9c:	0f b6       	in	r0, 0x3f	; 63
  9e:	0f 92       	push	r0
  a0:	11 24       	eor	r1, r1
	LED_PORT &= ~(1<<6);
  a2:	96 98       	cbi	0x12, 6	; 18
	while((PIND & (1 << 3)) == 0);
  a4:	83 9b       	sbis	0x10, 3	; 16
  a6:	fe cf       	rjmp	.-4      	; 0xa4 <__vector_2+0xc>
}
  a8:	0f 90       	pop	r0
  aa:	0f be       	out	0x3f, r0	; 63
  ac:	0f 90       	pop	r0
  ae:	1f 90       	pop	r1
  b0:	18 95       	reti

000000b2 <_exit>:
  b2:	f8 94       	cli

000000b4 <__stop_program>:
  b4:	ff cf       	rjmp	.-2      	; 0xb4 <__stop_program>
