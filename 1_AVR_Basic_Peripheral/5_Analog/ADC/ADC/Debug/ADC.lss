
ADC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000202  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000e  00800060  00000202  00000276  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000284  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000002b4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000078  00000000  00000000  000002f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000c47  00000000  00000000  00000368  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000087e  00000000  00000000  00000faf  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000522  00000000  00000000  0000182d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000e0  00000000  00000000  00001d50  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003d6  00000000  00000000  00001e30  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000462  00000000  00000000  00002206  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000058  00000000  00000000  00002668  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 e0       	ldi	r30, 0x02	; 2
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ae 36       	cpi	r26, 0x6E	; 110
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 5a 00 	call	0xb4	; 0xb4 <main>
  7a:	0c 94 ff 00 	jmp	0x1fe	; 0x1fe <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <ADC_Init>:
#include <stdlib.h>
#include "LCD_16x2_H_file.h"

void ADC_Init()
{
	DDRA=0x0;			/* Make ADC port as input */
  82:	1a ba       	out	0x1a, r1	; 26
	ADCSRA = 0x87;		/*Enable ADC, fr/128  */
  84:	87 e8       	ldi	r24, 0x87	; 135
  86:	86 b9       	out	0x06, r24	; 6
	ADMUX = 0x40;		/*Vref: Avcc, ADC channel: 0 */
  88:	80 e4       	ldi	r24, 0x40	; 64
  8a:	87 b9       	out	0x07, r24	; 7
  8c:	08 95       	ret

0000008e <ADC_Read>:

int ADC_Read(char channel)
{
	int Ain,AinLow;
	
	ADMUX=ADMUX|(channel & 0x0f);		/* set input channel to read */
  8e:	97 b1       	in	r25, 0x07	; 7
  90:	8f 70       	andi	r24, 0x0F	; 15
  92:	98 2b       	or	r25, r24
  94:	97 b9       	out	0x07, r25	; 7

	ADCSRA |= (1<<ADSC);		/* start conversion */
  96:	36 9a       	sbi	0x06, 6	; 6
	while((ADCSRA&(1<<ADIF))==0);	/*monitor end of conversion interrupt flag */
  98:	34 9b       	sbis	0x06, 4	; 6
  9a:	fe cf       	rjmp	.-4      	; 0x98 <ADC_Read+0xa>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  9c:	8a e1       	ldi	r24, 0x1A	; 26
  9e:	8a 95       	dec	r24
  a0:	f1 f7       	brne	.-4      	; 0x9e <ADC_Read+0x10>
  a2:	00 c0       	rjmp	.+0      	; 0xa4 <ADC_Read+0x16>
	
	_delay_us(10);
	AinLow = (int)ADCL;				/*read lower byte*/
  a4:	24 b1       	in	r18, 0x04	; 4
	Ain = (int)ADCH*256;			/*read higher 2 bits, Multiply with weightage*/
  a6:	85 b1       	in	r24, 0x05	; 5
  a8:	90 e0       	ldi	r25, 0x00	; 0
  aa:	98 2f       	mov	r25, r24
  ac:	88 27       	eor	r24, r24
	Ain = Ain + AinLow;				
	return(Ain);					/*return digital value*/
}
  ae:	82 0f       	add	r24, r18
  b0:	91 1d       	adc	r25, r1
  b2:	08 95       	ret

000000b4 <main>:

 
int main()
{
  b4:	cf 93       	push	r28
  b6:	df 93       	push	r29
  b8:	00 d0       	rcall	.+0      	; 0xba <main+0x6>
  ba:	00 d0       	rcall	.+0      	; 0xbc <main+0x8>
  bc:	1f 92       	push	r1
  be:	cd b7       	in	r28, 0x3d	; 61
  c0:	de b7       	in	r29, 0x3e	; 62
	char String[5];
	int value;

	ADC_Init();
  c2:	0e 94 41 00 	call	0x82	; 0x82 <ADC_Init>
	LCD_Init();						/* initialization of LCD */
  c6:	0e 94 a0 00 	call	0x140	; 0x140 <LCD_Init>
	LCD_String("ADC value");		/* write string on 1st line of LCD */
  ca:	80 e6       	ldi	r24, 0x60	; 96
  cc:	90 e0       	ldi	r25, 0x00	; 0
  ce:	0e 94 bb 00 	call	0x176	; 0x176 <LCD_String>

	while(1)
	{
	
		LCD_Command(0xc4);						/* LCD16x2 cursor position */
  d2:	84 ec       	ldi	r24, 0xC4	; 196
  d4:	0e 94 7e 00 	call	0xfc	; 0xfc <LCD_Command>
		value=ADC_Read(0);						/* read ADC channel 0 */
  d8:	80 e0       	ldi	r24, 0x00	; 0
  da:	0e 94 47 00 	call	0x8e	; 0x8e <ADC_Read>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
  de:	4a e0       	ldi	r20, 0x0A	; 10
  e0:	be 01       	movw	r22, r28
  e2:	6f 5f       	subi	r22, 0xFF	; 255
  e4:	7f 4f       	sbci	r23, 0xFF	; 255
  e6:	0e 94 ca 00 	call	0x194	; 0x194 <__itoa_ncheck>
		itoa(value,String,10);					/* int. to string conversion */ 
		LCD_String(String);						
  ea:	ce 01       	movw	r24, r28
  ec:	01 96       	adiw	r24, 0x01	; 1
  ee:	0e 94 bb 00 	call	0x176	; 0x176 <LCD_String>
		LCD_String("  ");			
  f2:	8a e6       	ldi	r24, 0x6A	; 106
  f4:	90 e0       	ldi	r25, 0x00	; 0
  f6:	0e 94 bb 00 	call	0x176	; 0x176 <LCD_String>
  fa:	eb cf       	rjmp	.-42     	; 0xd2 <main+0x1e>

000000fc <LCD_Command>:
#include "LCD_16x2_H_file.h"						/* Include LCD header file */


void LCD_Command (char cmd)							/* LCD command write function */
{
	LCD_Data_Port = cmd;							/* Write command data to LCD data port */
  fc:	88 bb       	out	0x18, r24	; 24
	LCD_Command_Port &= ~((1<<RS)|(1<<RW));			/* Make RS LOW (command reg.), RW LOW (Write) */
  fe:	85 b3       	in	r24, 0x15	; 21
 100:	8c 7f       	andi	r24, 0xFC	; 252
 102:	85 bb       	out	0x15, r24	; 21
	LCD_Command_Port |= (1<<EN);					/* High to Low transition on EN (Enable) */
 104:	ab 9a       	sbi	0x15, 3	; 21
 106:	82 e0       	ldi	r24, 0x02	; 2
 108:	8a 95       	dec	r24
 10a:	f1 f7       	brne	.-4      	; 0x108 <LCD_Command+0xc>
 10c:	00 c0       	rjmp	.+0      	; 0x10e <LCD_Command+0x12>
	_delay_us(1);
	LCD_Command_Port &= ~(1<<EN);
 10e:	ab 98       	cbi	0x15, 3	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 110:	8f e6       	ldi	r24, 0x6F	; 111
 112:	97 e1       	ldi	r25, 0x17	; 23
 114:	01 97       	sbiw	r24, 0x01	; 1
 116:	f1 f7       	brne	.-4      	; 0x114 <LCD_Command+0x18>
 118:	00 c0       	rjmp	.+0      	; 0x11a <LCD_Command+0x1e>
 11a:	00 00       	nop
 11c:	08 95       	ret

0000011e <LCD_Char>:
	_delay_ms(3);									/* Wait little bit */
}

void LCD_Char (char char_data)						/* LCD data write function */
{
	LCD_Data_Port = char_data;						/* Write data to LCD data port */
 11e:	88 bb       	out	0x18, r24	; 24
	LCD_Command_Port &= ~(1<<RW);					/* Make RW LOW (Write) */
 120:	a9 98       	cbi	0x15, 1	; 21
	LCD_Command_Port |= (1<<EN)|(1<<RS);			/* Make RS HIGH (data reg.) and High to Low transition on EN (Enable) */
 122:	85 b3       	in	r24, 0x15	; 21
 124:	89 60       	ori	r24, 0x09	; 9
 126:	85 bb       	out	0x15, r24	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 128:	82 e0       	ldi	r24, 0x02	; 2
 12a:	8a 95       	dec	r24
 12c:	f1 f7       	brne	.-4      	; 0x12a <LCD_Char+0xc>
 12e:	00 c0       	rjmp	.+0      	; 0x130 <LCD_Char+0x12>
	_delay_us(1);
	LCD_Command_Port &= ~(1<<EN);
 130:	ab 98       	cbi	0x15, 3	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 132:	8f ec       	ldi	r24, 0xCF	; 207
 134:	97 e0       	ldi	r25, 0x07	; 7
 136:	01 97       	sbiw	r24, 0x01	; 1
 138:	f1 f7       	brne	.-4      	; 0x136 <LCD_Char+0x18>
 13a:	00 c0       	rjmp	.+0      	; 0x13c <LCD_Char+0x1e>
 13c:	00 00       	nop
 13e:	08 95       	ret

00000140 <LCD_Init>:
	_delay_ms(1);									/* Wait little bit */
}

void LCD_Init (void)								/* LCD Initialize function */
{
	LCD_Command_Dir |= (1<<RS)|(1<<RW)|(1<<EN);		/* Make LCD command port direction as o/p */
 140:	84 b3       	in	r24, 0x14	; 20
 142:	8b 60       	ori	r24, 0x0B	; 11
 144:	84 bb       	out	0x14, r24	; 20
	LCD_Data_Dir = 0xFF;							/* Make LCD data port direction as o/p */
 146:	8f ef       	ldi	r24, 0xFF	; 255
 148:	87 bb       	out	0x17, r24	; 23
 14a:	8f e3       	ldi	r24, 0x3F	; 63
 14c:	9c e9       	ldi	r25, 0x9C	; 156
 14e:	01 97       	sbiw	r24, 0x01	; 1
 150:	f1 f7       	brne	.-4      	; 0x14e <LCD_Init+0xe>
 152:	00 c0       	rjmp	.+0      	; 0x154 <LCD_Init+0x14>
 154:	00 00       	nop
	
	_delay_ms(20);									/* LCD power up time to get things ready, it should always >15ms */
	LCD_Command (0x38);								/* Initialize 16X2 LCD in 8bit mode */
 156:	88 e3       	ldi	r24, 0x38	; 56
 158:	0e 94 7e 00 	call	0xfc	; 0xfc <LCD_Command>
	LCD_Command (0x0C);								/* Display ON, Cursor OFF command */
 15c:	8c e0       	ldi	r24, 0x0C	; 12
 15e:	0e 94 7e 00 	call	0xfc	; 0xfc <LCD_Command>
	LCD_Command (0x06);								/* Auto Increment cursor */
 162:	86 e0       	ldi	r24, 0x06	; 6
 164:	0e 94 7e 00 	call	0xfc	; 0xfc <LCD_Command>
	LCD_Command (0x01);								/* Clear LCD command */
 168:	81 e0       	ldi	r24, 0x01	; 1
 16a:	0e 94 7e 00 	call	0xfc	; 0xfc <LCD_Command>
	LCD_Command (0x80);								/* 8 is for first line and 0 is for 0th position */
 16e:	80 e8       	ldi	r24, 0x80	; 128
 170:	0e 94 7e 00 	call	0xfc	; 0xfc <LCD_Command>
 174:	08 95       	ret

00000176 <LCD_String>:
}

void LCD_String (char *str)							/* Send string to LCD function */
{
 176:	cf 93       	push	r28
 178:	df 93       	push	r29
 17a:	ec 01       	movw	r28, r24
	int i;
	for(i=0;str[i]!=0;i++)							/* Send each char of string till the NULL */
 17c:	88 81       	ld	r24, Y
 17e:	88 23       	and	r24, r24
 180:	31 f0       	breq	.+12     	; 0x18e <LCD_String+0x18>
 182:	21 96       	adiw	r28, 0x01	; 1
	{
		LCD_Char (str[i]);							/* Call LCD data write */
 184:	0e 94 8f 00 	call	0x11e	; 0x11e <LCD_Char>
}

void LCD_String (char *str)							/* Send string to LCD function */
{
	int i;
	for(i=0;str[i]!=0;i++)							/* Send each char of string till the NULL */
 188:	89 91       	ld	r24, Y+
 18a:	81 11       	cpse	r24, r1
 18c:	fb cf       	rjmp	.-10     	; 0x184 <LCD_String+0xe>
	{
		LCD_Char (str[i]);							/* Call LCD data write */
	}
}
 18e:	df 91       	pop	r29
 190:	cf 91       	pop	r28
 192:	08 95       	ret

00000194 <__itoa_ncheck>:
 194:	bb 27       	eor	r27, r27
 196:	4a 30       	cpi	r20, 0x0A	; 10
 198:	31 f4       	brne	.+12     	; 0x1a6 <__itoa_ncheck+0x12>
 19a:	99 23       	and	r25, r25
 19c:	22 f4       	brpl	.+8      	; 0x1a6 <__itoa_ncheck+0x12>
 19e:	bd e2       	ldi	r27, 0x2D	; 45
 1a0:	90 95       	com	r25
 1a2:	81 95       	neg	r24
 1a4:	9f 4f       	sbci	r25, 0xFF	; 255
 1a6:	0c 94 d6 00 	jmp	0x1ac	; 0x1ac <__utoa_common>

000001aa <__utoa_ncheck>:
 1aa:	bb 27       	eor	r27, r27

000001ac <__utoa_common>:
 1ac:	fb 01       	movw	r30, r22
 1ae:	55 27       	eor	r21, r21
 1b0:	aa 27       	eor	r26, r26
 1b2:	88 0f       	add	r24, r24
 1b4:	99 1f       	adc	r25, r25
 1b6:	aa 1f       	adc	r26, r26
 1b8:	a4 17       	cp	r26, r20
 1ba:	10 f0       	brcs	.+4      	; 0x1c0 <__utoa_common+0x14>
 1bc:	a4 1b       	sub	r26, r20
 1be:	83 95       	inc	r24
 1c0:	50 51       	subi	r21, 0x10	; 16
 1c2:	b9 f7       	brne	.-18     	; 0x1b2 <__utoa_common+0x6>
 1c4:	a0 5d       	subi	r26, 0xD0	; 208
 1c6:	aa 33       	cpi	r26, 0x3A	; 58
 1c8:	08 f0       	brcs	.+2      	; 0x1cc <__utoa_common+0x20>
 1ca:	a9 5d       	subi	r26, 0xD9	; 217
 1cc:	a1 93       	st	Z+, r26
 1ce:	00 97       	sbiw	r24, 0x00	; 0
 1d0:	79 f7       	brne	.-34     	; 0x1b0 <__utoa_common+0x4>
 1d2:	b1 11       	cpse	r27, r1
 1d4:	b1 93       	st	Z+, r27
 1d6:	11 92       	st	Z+, r1
 1d8:	cb 01       	movw	r24, r22
 1da:	0c 94 ef 00 	jmp	0x1de	; 0x1de <strrev>

000001de <strrev>:
 1de:	dc 01       	movw	r26, r24
 1e0:	fc 01       	movw	r30, r24
 1e2:	67 2f       	mov	r22, r23
 1e4:	71 91       	ld	r23, Z+
 1e6:	77 23       	and	r23, r23
 1e8:	e1 f7       	brne	.-8      	; 0x1e2 <strrev+0x4>
 1ea:	32 97       	sbiw	r30, 0x02	; 2
 1ec:	04 c0       	rjmp	.+8      	; 0x1f6 <strrev+0x18>
 1ee:	7c 91       	ld	r23, X
 1f0:	6d 93       	st	X+, r22
 1f2:	70 83       	st	Z, r23
 1f4:	62 91       	ld	r22, -Z
 1f6:	ae 17       	cp	r26, r30
 1f8:	bf 07       	cpc	r27, r31
 1fa:	c8 f3       	brcs	.-14     	; 0x1ee <strrev+0x10>
 1fc:	08 95       	ret

000001fe <_exit>:
 1fe:	f8 94       	cli

00000200 <__stop_program>:
 200:	ff cf       	rjmp	.-2      	; 0x200 <__stop_program>
