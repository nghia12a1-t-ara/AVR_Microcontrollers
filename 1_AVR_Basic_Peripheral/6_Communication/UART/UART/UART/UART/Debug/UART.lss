
UART.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000108  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000006  00800060  00000108  0000017c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000182  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001b4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  000001f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000066d  00000000  00000000  00000230  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005c0  00000000  00000000  0000089d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000292  00000000  00000000  00000e5d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000074  00000000  00000000  000010f0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002e3  00000000  00000000  00001164  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000a1  00000000  00000000  00001447  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  000014e8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 e0       	ldi	r30, 0x08	; 8
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a6 36       	cpi	r26, 0x66	; 102
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 68 00 	call	0xd0	; 0xd0 <main>
  7a:	0c 94 82 00 	jmp	0x104	; 0x104 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <UART_Init>:
#include <stdlib.h>
#include <stdio.h>

void UART_Init()
{
	UBRRL = 51;	
  82:	83 e3       	ldi	r24, 0x33	; 51
  84:	89 b9       	out	0x09, r24	; 9
	UCSRB |= (1 << RXEN) | (1 << TXEN) | (1 << RXCIE);
  86:	8a b1       	in	r24, 0x0a	; 10
  88:	88 69       	ori	r24, 0x98	; 152
  8a:	8a b9       	out	0x0a, r24	; 10
	UCSRC |= (1 << UCSZ1) | (1 << UCSZ0);						//Baud = 9600, U2X = 0, F = 8MHz	
  8c:	80 b5       	in	r24, 0x20	; 32
  8e:	86 60       	ori	r24, 0x06	; 6
  90:	80 bd       	out	0x20, r24	; 32
  92:	08 95       	ret

00000094 <send>:
}

void send(unsigned char c)
{
	while(bit_is_clear(UCSRA, UDRE));
  94:	5d 9b       	sbis	0x0b, 5	; 11
  96:	fe cf       	rjmp	.-4      	; 0x94 <send>
	UDR = c;
  98:	8c b9       	out	0x0c, r24	; 12
  9a:	08 95       	ret

0000009c <UART_Write_Str>:
}

void UART_Write_Str(char *str)
{
  9c:	0f 93       	push	r16
  9e:	1f 93       	push	r17
  a0:	cf 93       	push	r28
  a2:	fc 01       	movw	r30, r24
	unsigned char i = 0;
	while (str[i] != 0)
  a4:	80 81       	ld	r24, Z
  a6:	88 23       	and	r24, r24
  a8:	59 f0       	breq	.+22     	; 0xc0 <UART_Write_Str+0x24>
  aa:	8f 01       	movw	r16, r30
  ac:	c0 e0       	ldi	r28, 0x00	; 0
	{
		send(str[i]);
  ae:	0e 94 4a 00 	call	0x94	; 0x94 <send>
		i++;
  b2:	cf 5f       	subi	r28, 0xFF	; 255
}

void UART_Write_Str(char *str)
{
	unsigned char i = 0;
	while (str[i] != 0)
  b4:	f8 01       	movw	r30, r16
  b6:	ec 0f       	add	r30, r28
  b8:	f1 1d       	adc	r31, r1
  ba:	80 81       	ld	r24, Z
  bc:	81 11       	cpse	r24, r1
  be:	f7 cf       	rjmp	.-18     	; 0xae <UART_Write_Str+0x12>
	{
		send(str[i]);
		i++;
	}
}
  c0:	cf 91       	pop	r28
  c2:	1f 91       	pop	r17
  c4:	0f 91       	pop	r16
  c6:	08 95       	ret

000000c8 <recei>:

unsigned char recei()
{
	while(bit_is_clear(UCSRA, RXC));
  c8:	5f 9b       	sbis	0x0b, 7	; 11
  ca:	fe cf       	rjmp	.-4      	; 0xc8 <recei>
	return UDR;
  cc:	8c b1       	in	r24, 0x0c	; 12
}
  ce:	08 95       	ret

000000d0 <main>:

int main(void)
{
	DDRA &= ~(1 << 1);
  d0:	d1 98       	cbi	0x1a, 1	; 26
	PORTA |= (1 << 1);
  d2:	d9 9a       	sbi	0x1b, 1	; 27
	DDRA |= (1 << 2);
  d4:	d2 9a       	sbi	0x1a, 2	; 26
	PORTA &= ~(1 << 2);
  d6:	da 98       	cbi	0x1b, 2	; 27
	//unsigned char c;
	
	UART_Init();
  d8:	0e 94 41 00 	call	0x82	; 0x82 <UART_Init>
	
	send('1');
  dc:	81 e3       	ldi	r24, 0x31	; 49
  de:	0e 94 4a 00 	call	0x94	; 0x94 <send>
    /* Replace with your application code */
    while (1) 
    {
		if (recei() == '1')
  e2:	0e 94 64 00 	call	0xc8	; 0xc8 <recei>
  e6:	81 33       	cpi	r24, 0x31	; 49
  e8:	19 f4       	brne	.+6      	; 0xf0 <main+0x20>
		{
			send('a');
  ea:	81 e6       	ldi	r24, 0x61	; 97
  ec:	0e 94 4a 00 	call	0x94	; 0x94 <send>
		}
		if (!(PINA & (1 << 1)))
  f0:	c9 99       	sbic	0x19, 1	; 25
  f2:	f7 cf       	rjmp	.-18     	; 0xe2 <main+0x12>
		{
			PORTA |= (1 << 2);
  f4:	da 9a       	sbi	0x1b, 2	; 27
			UART_Write_Str("Hello");
  f6:	80 e6       	ldi	r24, 0x60	; 96
  f8:	90 e0       	ldi	r25, 0x00	; 0
  fa:	0e 94 4e 00 	call	0x9c	; 0x9c <UART_Write_Str>
			while (!(PINA & (1 << 1)));
  fe:	c9 9b       	sbis	0x19, 1	; 25
 100:	fe cf       	rjmp	.-4      	; 0xfe <main+0x2e>
 102:	ef cf       	rjmp	.-34     	; 0xe2 <main+0x12>

00000104 <_exit>:
 104:	f8 94       	cli

00000106 <__stop_program>:
 106:	ff cf       	rjmp	.-2      	; 0x106 <__stop_program>
