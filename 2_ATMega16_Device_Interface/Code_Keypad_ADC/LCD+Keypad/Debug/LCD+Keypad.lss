
LCD+Keypad.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000024c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000030  00800060  0000024c  000002c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000002f0  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000320  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000090  00000000  00000000  0000035c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000da5  00000000  00000000  000003ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000862  00000000  00000000  00001191  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000068a  00000000  00000000  000019f3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000e4  00000000  00000000  00002080  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000416  00000000  00000000  00002164  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000005e6  00000000  00000000  0000257a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000060  00000000  00000000  00002b60  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec e4       	ldi	r30, 0x4C	; 76
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 39       	cpi	r26, 0x90	; 144
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <main>
  7a:	0c 94 24 01 	jmp	0x248	; 0x248 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <ADC_Init>:
#include "util/delay.h"
#include "ADC.h"

void ADC_Init()
{
	DDRA=0x0;			/* Make ADC port as input */
  82:	1a ba       	out	0x1a, r1	; 26
	ADCSRA = 0x87;			/* Enable ADC, fr/128  */
  84:	87 e8       	ldi	r24, 0x87	; 135
  86:	86 b9       	out	0x06, r24	; 6
	ADMUX = 0x40;			/* Vref: Avcc, ADC channel: 0 */
  88:	80 e4       	ldi	r24, 0x40	; 64
  8a:	87 b9       	out	0x07, r24	; 7
  8c:	08 95       	ret

0000008e <ADC_Read>:

int ADC_Read(char channel)
{
	int Ain,AinLow;
	
	ADMUX=ADMUX|(channel & 0x0f);	/* Set input channel to read */
  8e:	97 b1       	in	r25, 0x07	; 7
  90:	8f 70       	andi	r24, 0x0F	; 15
  92:	98 2b       	or	r25, r24
  94:	97 b9       	out	0x07, r25	; 7

	ADCSRA |= (1<<ADSC);		/* Start conversion */
  96:	36 9a       	sbi	0x06, 6	; 6
	while((ADCSRA&(1<<ADIF))==0);	/* Monitor end of conversion interrupt */
  98:	34 9b       	sbis	0x06, 4	; 6
  9a:	fe cf       	rjmp	.-4      	; 0x98 <ADC_Read+0xa>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  9c:	85 e3       	ldi	r24, 0x35	; 53
  9e:	8a 95       	dec	r24
  a0:	f1 f7       	brne	.-4      	; 0x9e <ADC_Read+0x10>
  a2:	00 00       	nop
	
	_delay_us(10);
	AinLow = (int)ADCL;		/* Read lower byte*/
  a4:	24 b1       	in	r18, 0x04	; 4
	Ain = (int)ADCH*256;		/* Read higher 2 bits and 
  a6:	85 b1       	in	r24, 0x05	; 5
  a8:	90 e0       	ldi	r25, 0x00	; 0
  aa:	98 2f       	mov	r25, r24
  ac:	88 27       	eor	r24, r24
					Multiply with weight */
	Ain = Ain + AinLow;				
	return(Ain);			/* Return digital value*/
}
  ae:	82 0f       	add	r24, r18
  b0:	91 1d       	adc	r25, r1
  b2:	08 95       	ret

000000b4 <LCD_Command>:
	if (row == 0 && pos<16)
	LCD_Command((pos & 0x0F)|0x80);			/* Command of first row and required position<16 */
	else if (row == 1 && pos<16)
	LCD_Command((pos & 0x0F)|0xC0);			/* Command of first row and required position<16 */
	LCD_String(str);						/* Call LCD string function */
}
  b4:	92 b3       	in	r25, 0x12	; 18
  b6:	9f 70       	andi	r25, 0x0F	; 15
  b8:	28 2f       	mov	r18, r24
  ba:	20 7f       	andi	r18, 0xF0	; 240
  bc:	92 2b       	or	r25, r18
  be:	92 bb       	out	0x12, r25	; 18
  c0:	90 98       	cbi	0x12, 0	; 18
  c2:	91 9a       	sbi	0x12, 1	; 18
  c4:	35 e0       	ldi	r19, 0x05	; 5
  c6:	3a 95       	dec	r19
  c8:	f1 f7       	brne	.-4      	; 0xc6 <LCD_Command+0x12>
  ca:	00 00       	nop
  cc:	91 98       	cbi	0x12, 1	; 18
  ce:	ef e1       	ldi	r30, 0x1F	; 31
  d0:	f3 e0       	ldi	r31, 0x03	; 3
  d2:	31 97       	sbiw	r30, 0x01	; 1
  d4:	f1 f7       	brne	.-4      	; 0xd2 <LCD_Command+0x1e>
  d6:	00 c0       	rjmp	.+0      	; 0xd8 <LCD_Command+0x24>
  d8:	00 00       	nop
  da:	22 b3       	in	r18, 0x12	; 18
  dc:	2f 70       	andi	r18, 0x0F	; 15
  de:	f0 e1       	ldi	r31, 0x10	; 16
  e0:	8f 9f       	mul	r24, r31
  e2:	c0 01       	movw	r24, r0
  e4:	11 24       	eor	r1, r1
  e6:	82 2b       	or	r24, r18
  e8:	82 bb       	out	0x12, r24	; 18
  ea:	91 9a       	sbi	0x12, 1	; 18
  ec:	35 e0       	ldi	r19, 0x05	; 5
  ee:	3a 95       	dec	r19
  f0:	f1 f7       	brne	.-4      	; 0xee <LCD_Command+0x3a>
  f2:	00 00       	nop
  f4:	91 98       	cbi	0x12, 1	; 18
  f6:	8f e3       	ldi	r24, 0x3F	; 63
  f8:	9f e1       	ldi	r25, 0x1F	; 31
  fa:	01 97       	sbiw	r24, 0x01	; 1
  fc:	f1 f7       	brne	.-4      	; 0xfa <LCD_Command+0x46>
  fe:	00 c0       	rjmp	.+0      	; 0x100 <LCD_Command+0x4c>
 100:	00 00       	nop
 102:	08 95       	ret

00000104 <LCD_Char>:
 104:	92 b3       	in	r25, 0x12	; 18
 106:	9f 70       	andi	r25, 0x0F	; 15
 108:	28 2f       	mov	r18, r24
 10a:	20 7f       	andi	r18, 0xF0	; 240
 10c:	92 2b       	or	r25, r18
 10e:	92 bb       	out	0x12, r25	; 18
 110:	90 9a       	sbi	0x12, 0	; 18
 112:	91 9a       	sbi	0x12, 1	; 18
 114:	35 e0       	ldi	r19, 0x05	; 5
 116:	3a 95       	dec	r19
 118:	f1 f7       	brne	.-4      	; 0x116 <LCD_Char+0x12>
 11a:	00 00       	nop
 11c:	91 98       	cbi	0x12, 1	; 18
 11e:	ef e1       	ldi	r30, 0x1F	; 31
 120:	f3 e0       	ldi	r31, 0x03	; 3
 122:	31 97       	sbiw	r30, 0x01	; 1
 124:	f1 f7       	brne	.-4      	; 0x122 <LCD_Char+0x1e>
 126:	00 c0       	rjmp	.+0      	; 0x128 <LCD_Char+0x24>
 128:	00 00       	nop
 12a:	22 b3       	in	r18, 0x12	; 18
 12c:	2f 70       	andi	r18, 0x0F	; 15
 12e:	f0 e1       	ldi	r31, 0x10	; 16
 130:	8f 9f       	mul	r24, r31
 132:	c0 01       	movw	r24, r0
 134:	11 24       	eor	r1, r1
 136:	82 2b       	or	r24, r18
 138:	82 bb       	out	0x12, r24	; 18
 13a:	91 9a       	sbi	0x12, 1	; 18
 13c:	35 e0       	ldi	r19, 0x05	; 5
 13e:	3a 95       	dec	r19
 140:	f1 f7       	brne	.-4      	; 0x13e <LCD_Char+0x3a>
 142:	00 00       	nop
 144:	91 98       	cbi	0x12, 1	; 18
 146:	8f e3       	ldi	r24, 0x3F	; 63
 148:	9f e1       	ldi	r25, 0x1F	; 31
 14a:	01 97       	sbiw	r24, 0x01	; 1
 14c:	f1 f7       	brne	.-4      	; 0x14a <LCD_Char+0x46>
 14e:	00 c0       	rjmp	.+0      	; 0x150 <LCD_Char+0x4c>
 150:	00 00       	nop
 152:	08 95       	ret

00000154 <LCD_Init>:
 154:	8f ef       	ldi	r24, 0xFF	; 255
 156:	81 bb       	out	0x11, r24	; 17
 158:	2f ef       	ldi	r18, 0xFF	; 255
 15a:	89 ef       	ldi	r24, 0xF9	; 249
 15c:	90 e0       	ldi	r25, 0x00	; 0
 15e:	21 50       	subi	r18, 0x01	; 1
 160:	80 40       	sbci	r24, 0x00	; 0
 162:	90 40       	sbci	r25, 0x00	; 0
 164:	e1 f7       	brne	.-8      	; 0x15e <LCD_Init+0xa>
 166:	00 c0       	rjmp	.+0      	; 0x168 <LCD_Init+0x14>
 168:	00 00       	nop
 16a:	82 e0       	ldi	r24, 0x02	; 2
 16c:	0e 94 5a 00 	call	0xb4	; 0xb4 <LCD_Command>
 170:	88 e2       	ldi	r24, 0x28	; 40
 172:	0e 94 5a 00 	call	0xb4	; 0xb4 <LCD_Command>
 176:	8c e0       	ldi	r24, 0x0C	; 12
 178:	0e 94 5a 00 	call	0xb4	; 0xb4 <LCD_Command>
 17c:	86 e0       	ldi	r24, 0x06	; 6
 17e:	0e 94 5a 00 	call	0xb4	; 0xb4 <LCD_Command>
 182:	81 e0       	ldi	r24, 0x01	; 1
 184:	0e 94 5a 00 	call	0xb4	; 0xb4 <LCD_Command>
 188:	8f e3       	ldi	r24, 0x3F	; 63
 18a:	9f e1       	ldi	r25, 0x1F	; 31
 18c:	01 97       	sbiw	r24, 0x01	; 1
 18e:	f1 f7       	brne	.-4      	; 0x18c <LCD_Init+0x38>
 190:	00 c0       	rjmp	.+0      	; 0x192 <LCD_Init+0x3e>
 192:	00 00       	nop
 194:	08 95       	ret

00000196 <LCD_Clear>:

void LCD_Clear()
{
	LCD_Command (0x01);		/* Clear display */
 196:	81 e0       	ldi	r24, 0x01	; 1
 198:	0e 94 5a 00 	call	0xb4	; 0xb4 <LCD_Command>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 19c:	8f e3       	ldi	r24, 0x3F	; 63
 19e:	9f e1       	ldi	r25, 0x1F	; 31
 1a0:	01 97       	sbiw	r24, 0x01	; 1
 1a2:	f1 f7       	brne	.-4      	; 0x1a0 <LCD_Clear+0xa>
 1a4:	00 c0       	rjmp	.+0      	; 0x1a6 <LCD_Clear+0x10>
 1a6:	00 00       	nop
	_delay_ms(2);
	LCD_Command (0x80);		/* Cursor at home position */
 1a8:	80 e8       	ldi	r24, 0x80	; 128
 1aa:	0e 94 5a 00 	call	0xb4	; 0xb4 <LCD_Command>
 1ae:	08 95       	ret

000001b0 <main>:
						{ 98  , 90 , 83 , 76  },
						{ 68  , 64 , 60 , 57  }};

int main(void)
{
	LCD_Init();
 1b0:	0e 94 aa 00 	call	0x154	; 0x154 <LCD_Init>
	ADC_Init();
 1b4:	0e 94 41 00 	call	0x82	; 0x82 <ADC_Init>
	LCD_Clear();
 1b8:	0e 94 cb 00 	call	0x196	; 0x196 <LCD_Clear>
 1bc:	0f 2e       	mov	r0, r31
 1be:	f0 e8       	ldi	r31, 0x80	; 128
 1c0:	af 2e       	mov	r10, r31
 1c2:	f0 e0       	ldi	r31, 0x00	; 0
 1c4:	bf 2e       	mov	r11, r31
 1c6:	f0 2d       	mov	r31, r0
					LCD_Char(keypad[i][j]);
				}
			}
		}
		
		if (Key_Value[3][0] == ADC_Value)
 1c8:	0f 2e       	mov	r0, r31
 1ca:	f0 e6       	ldi	r31, 0x60	; 96
 1cc:	6f 2e       	mov	r6, r31
 1ce:	f0 e0       	ldi	r31, 0x00	; 0
 1d0:	7f 2e       	mov	r7, r31
 1d2:	f0 2d       	mov	r31, r0
	int ADC_Value;
	//char buffer[5];
	
    while (1) 
    {
		ADC_Value = ADC_Read(0);
 1d4:	80 e0       	ldi	r24, 0x00	; 0
 1d6:	0e 94 47 00 	call	0x8e	; 0x8e <ADC_Read>
 1da:	6c 01       	movw	r12, r24
 1dc:	c0 e6       	ldi	r28, 0x60	; 96
 1de:	d0 e0       	ldi	r29, 0x00	; 0
 1e0:	0f 2e       	mov	r0, r31
 1e2:	f0 e8       	ldi	r31, 0x80	; 128
 1e4:	8f 2e       	mov	r8, r31
 1e6:	f0 e0       	ldi	r31, 0x00	; 0
 1e8:	9f 2e       	mov	r9, r31
 1ea:	f0 2d       	mov	r31, r0
 1ec:	1e c0       	rjmp	.+60     	; 0x22a <main+0x7a>
		
		for (int i = 0; i < 4; i++)
		{
			for (int j = 0; j < 4; j++)
			{
				if (Key_Value[i][j] == ADC_Value)
 1ee:	89 91       	ld	r24, Y+
 1f0:	99 91       	ld	r25, Y+
 1f2:	c8 16       	cp	r12, r24
 1f4:	d9 06       	cpc	r13, r25
 1f6:	69 f4       	brne	.+26     	; 0x212 <main+0x62>
 1f8:	2f ef       	ldi	r18, 0xFF	; 255
 1fa:	89 ef       	ldi	r24, 0xF9	; 249
 1fc:	90 e0       	ldi	r25, 0x00	; 0
 1fe:	21 50       	subi	r18, 0x01	; 1
 200:	80 40       	sbci	r24, 0x00	; 0
 202:	90 40       	sbci	r25, 0x00	; 0
 204:	e1 f7       	brne	.-8      	; 0x1fe <main+0x4e>
 206:	00 c0       	rjmp	.+0      	; 0x208 <main+0x58>
 208:	00 00       	nop
				{
					_delay_ms(20);
					LCD_Char(keypad[i][j]);
 20a:	f8 01       	movw	r30, r16
 20c:	80 81       	ld	r24, Z
 20e:	0e 94 82 00 	call	0x104	; 0x104 <LCD_Char>
 212:	0f 5f       	subi	r16, 0xFF	; 255
 214:	1f 4f       	sbci	r17, 0xFF	; 255
    {
		ADC_Value = ADC_Read(0);
		
		for (int i = 0; i < 4; i++)
		{
			for (int j = 0; j < 4; j++)
 216:	ce 15       	cp	r28, r14
 218:	df 05       	cpc	r29, r15
 21a:	49 f7       	brne	.-46     	; 0x1ee <main+0x3e>
 21c:	f4 e0       	ldi	r31, 0x04	; 4
 21e:	8f 0e       	add	r8, r31
 220:	91 1c       	adc	r9, r1
 222:	e7 01       	movw	r28, r14
	
    while (1) 
    {
		ADC_Value = ADC_Read(0);
		
		for (int i = 0; i < 4; i++)
 224:	ae 14       	cp	r10, r14
 226:	bf 04       	cpc	r11, r15
 228:	31 f0       	breq	.+12     	; 0x236 <main+0x86>
 22a:	7e 01       	movw	r14, r28
 22c:	28 e0       	ldi	r18, 0x08	; 8
 22e:	e2 0e       	add	r14, r18
 230:	f1 1c       	adc	r15, r1
						{ 180 , 153, 133, 118 },
						{ 98  , 90 , 83 , 76  },
						{ 68  , 64 , 60 , 57  }};

int main(void)
{
 232:	84 01       	movw	r16, r8
 234:	dc cf       	rjmp	.-72     	; 0x1ee <main+0x3e>
					LCD_Char(keypad[i][j]);
				}
			}
		}
		
		if (Key_Value[3][0] == ADC_Value)
 236:	f3 01       	movw	r30, r6
 238:	80 8d       	ldd	r24, Z+24	; 0x18
 23a:	91 8d       	ldd	r25, Z+25	; 0x19
 23c:	c8 16       	cp	r12, r24
 23e:	d9 06       	cpc	r13, r25
 240:	49 f6       	brne	.-110    	; 0x1d4 <main+0x24>
		{
			LCD_Clear();
 242:	0e 94 cb 00 	call	0x196	; 0x196 <LCD_Clear>
 246:	c6 cf       	rjmp	.-116    	; 0x1d4 <main+0x24>

00000248 <_exit>:
 248:	f8 94       	cli

0000024a <__stop_program>:
 24a:	ff cf       	rjmp	.-2      	; 0x24a <__stop_program>
