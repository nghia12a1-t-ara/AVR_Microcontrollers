
Stepmotor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001a0  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000001f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000001f4  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000224  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000260  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000098f  00000000  00000000  00000280  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000597  00000000  00000000  00000c0f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000434  00000000  00000000  000011a6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  000015dc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000317  00000000  00000000  00001600  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000543  00000000  00000000  00001917  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000040  00000000  00000000  00001e5a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 ce 00 	jmp	0x19c	; 0x19c <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#include <util/delay.h>		/* Include delay header file */

int main(void)
{
	int period;
	DDRD = 0x0F;		/* Make PORTD lower pins as output */
  6c:	8f e0       	ldi	r24, 0x0F	; 15
  6e:	81 bb       	out	0x11, r24	; 17
	PORTD |= (1 << 4) | (1 << 5) | (1 << 6);
  70:	82 b3       	in	r24, 0x12	; 18
  72:	80 67       	ori	r24, 0x70	; 112
  74:	82 bb       	out	0x12, r24	; 18
	period = 10;		/* Set period in between two steps */
	while (1)
	{
		if (!(PIND & (1 << 4)))
		{
			PORTD = 0xF9;
  76:	a9 ef       	ldi	r26, 0xF9	; 249
			while (!(PIND & (1 << 4)));
			_delay_ms(period);
			for(int i = 0; i < 5; i++)
			{
				PORTD = 0x03;
  78:	23 e0       	ldi	r18, 0x03	; 3
				_delay_ms(period);
				PORTD = 0x06;
  7a:	46 e0       	ldi	r20, 0x06	; 6
				_delay_ms(period);
				PORTD = 0x0C;
  7c:	3c e0       	ldi	r19, 0x0C	; 12
				_delay_ms(period);	
			}
		}
		if (!(PIND & (1 << 5)))
		{
			PORTD = 0xF3;
  7e:	f3 ef       	ldi	r31, 0xF3	; 243
			while (!(PIND & (1 << 5)));
			_delay_ms(period);
			for(int i = 0; i < 5; i++)
			{
				PORTD = 0x08;
  80:	e8 e0       	ldi	r30, 0x08	; 8
				_delay_ms(period);
				PORTD = 0x0C;
				_delay_ms(period);
				PORTD = 0x04;
  82:	74 e0       	ldi	r23, 0x04	; 4
				_delay_ms(period);
				PORTD = 0x06;
				_delay_ms(period);
				PORTD = 0x02;
  84:	62 e0       	ldi	r22, 0x02	; 2
				_delay_ms(period);
				PORTD = 0x03;
				_delay_ms(period);
				PORTD = 0x01;
  86:	51 e0       	ldi	r21, 0x01	; 1
				_delay_ms(period);
			}
		}
		if (!(PIND & (1 << 6)))
		{
			PORTD = 0xFC;
  88:	bc ef       	ldi	r27, 0xFC	; 252
	DDRD = 0x0F;		/* Make PORTD lower pins as output */
	PORTD |= (1 << 4) | (1 << 5) | (1 << 6);
	period = 10;		/* Set period in between two steps */
	while (1)
	{
		if (!(PIND & (1 << 4)))
  8a:	84 99       	sbic	0x10, 4	; 16
  8c:	22 c0       	rjmp	.+68     	; 0xd2 <main+0x66>
		{
			PORTD = 0xF9;
  8e:	a2 bb       	out	0x12, r26	; 18
			while (!(PIND & (1 << 4)));
  90:	84 9b       	sbis	0x10, 4	; 16
  92:	fe cf       	rjmp	.-4      	; 0x90 <main+0x24>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  94:	8f e3       	ldi	r24, 0x3F	; 63
  96:	9c e9       	ldi	r25, 0x9C	; 156
  98:	01 97       	sbiw	r24, 0x01	; 1
  9a:	f1 f7       	brne	.-4      	; 0x98 <main+0x2c>
  9c:	00 c0       	rjmp	.+0      	; 0x9e <main+0x32>
  9e:	00 00       	nop
  a0:	85 e0       	ldi	r24, 0x05	; 5
  a2:	90 e0       	ldi	r25, 0x00	; 0
			_delay_ms(period);
			for(int i = 0; i < 5; i++)
			{
				PORTD = 0x03;
  a4:	22 bb       	out	0x12, r18	; 18
  a6:	cf e3       	ldi	r28, 0x3F	; 63
  a8:	dc e9       	ldi	r29, 0x9C	; 156
  aa:	21 97       	sbiw	r28, 0x01	; 1
  ac:	f1 f7       	brne	.-4      	; 0xaa <main+0x3e>
  ae:	00 c0       	rjmp	.+0      	; 0xb0 <main+0x44>
  b0:	00 00       	nop
				_delay_ms(period);
				PORTD = 0x06;
  b2:	42 bb       	out	0x12, r20	; 18
  b4:	cf e3       	ldi	r28, 0x3F	; 63
  b6:	dc e9       	ldi	r29, 0x9C	; 156
  b8:	21 97       	sbiw	r28, 0x01	; 1
  ba:	f1 f7       	brne	.-4      	; 0xb8 <main+0x4c>
  bc:	00 c0       	rjmp	.+0      	; 0xbe <main+0x52>
  be:	00 00       	nop
				_delay_ms(period);
				PORTD = 0x0C;
  c0:	32 bb       	out	0x12, r19	; 18
  c2:	cf e3       	ldi	r28, 0x3F	; 63
  c4:	dc e9       	ldi	r29, 0x9C	; 156
  c6:	21 97       	sbiw	r28, 0x01	; 1
  c8:	f1 f7       	brne	.-4      	; 0xc6 <main+0x5a>
  ca:	00 c0       	rjmp	.+0      	; 0xcc <main+0x60>
  cc:	00 00       	nop
  ce:	01 97       	sbiw	r24, 0x01	; 1
		if (!(PIND & (1 << 4)))
		{
			PORTD = 0xF9;
			while (!(PIND & (1 << 4)));
			_delay_ms(period);
			for(int i = 0; i < 5; i++)
  d0:	49 f7       	brne	.-46     	; 0xa4 <main+0x38>
				_delay_ms(period);
				PORTD = 0x0C;
				_delay_ms(period);	
			}
		}
		if (!(PIND & (1 << 5)))
  d2:	85 99       	sbic	0x10, 5	; 16
  d4:	3e c0       	rjmp	.+124    	; 0x152 <main+0xe6>
		{
			PORTD = 0xF3;
  d6:	f2 bb       	out	0x12, r31	; 18
			while (!(PIND & (1 << 5)));
  d8:	85 9b       	sbis	0x10, 5	; 16
  da:	fe cf       	rjmp	.-4      	; 0xd8 <main+0x6c>
  dc:	8f e3       	ldi	r24, 0x3F	; 63
  de:	9c e9       	ldi	r25, 0x9C	; 156
  e0:	01 97       	sbiw	r24, 0x01	; 1
  e2:	f1 f7       	brne	.-4      	; 0xe0 <main+0x74>
  e4:	00 c0       	rjmp	.+0      	; 0xe6 <main+0x7a>
  e6:	00 00       	nop
  e8:	85 e0       	ldi	r24, 0x05	; 5
  ea:	90 e0       	ldi	r25, 0x00	; 0
			_delay_ms(period);
			for(int i = 0; i < 5; i++)
			{
				PORTD = 0x08;
  ec:	e2 bb       	out	0x12, r30	; 18
  ee:	cf e3       	ldi	r28, 0x3F	; 63
  f0:	dc e9       	ldi	r29, 0x9C	; 156
  f2:	21 97       	sbiw	r28, 0x01	; 1
  f4:	f1 f7       	brne	.-4      	; 0xf2 <main+0x86>
  f6:	00 c0       	rjmp	.+0      	; 0xf8 <main+0x8c>
  f8:	00 00       	nop
				_delay_ms(period);
				PORTD = 0x0C;
  fa:	32 bb       	out	0x12, r19	; 18
  fc:	cf e3       	ldi	r28, 0x3F	; 63
  fe:	dc e9       	ldi	r29, 0x9C	; 156
 100:	21 97       	sbiw	r28, 0x01	; 1
 102:	f1 f7       	brne	.-4      	; 0x100 <main+0x94>
 104:	00 c0       	rjmp	.+0      	; 0x106 <main+0x9a>
 106:	00 00       	nop
				_delay_ms(period);
				PORTD = 0x04;
 108:	72 bb       	out	0x12, r23	; 18
 10a:	cf e3       	ldi	r28, 0x3F	; 63
 10c:	dc e9       	ldi	r29, 0x9C	; 156
 10e:	21 97       	sbiw	r28, 0x01	; 1
 110:	f1 f7       	brne	.-4      	; 0x10e <main+0xa2>
 112:	00 c0       	rjmp	.+0      	; 0x114 <main+0xa8>
 114:	00 00       	nop
				_delay_ms(period);
				PORTD = 0x06;
 116:	42 bb       	out	0x12, r20	; 18
 118:	cf e3       	ldi	r28, 0x3F	; 63
 11a:	dc e9       	ldi	r29, 0x9C	; 156
 11c:	21 97       	sbiw	r28, 0x01	; 1
 11e:	f1 f7       	brne	.-4      	; 0x11c <main+0xb0>
 120:	00 c0       	rjmp	.+0      	; 0x122 <main+0xb6>
 122:	00 00       	nop
				_delay_ms(period);
				PORTD = 0x02;
 124:	62 bb       	out	0x12, r22	; 18
 126:	cf e3       	ldi	r28, 0x3F	; 63
 128:	dc e9       	ldi	r29, 0x9C	; 156
 12a:	21 97       	sbiw	r28, 0x01	; 1
 12c:	f1 f7       	brne	.-4      	; 0x12a <main+0xbe>
 12e:	00 c0       	rjmp	.+0      	; 0x130 <main+0xc4>
 130:	00 00       	nop
				_delay_ms(period);
				PORTD = 0x03;
 132:	22 bb       	out	0x12, r18	; 18
 134:	cf e3       	ldi	r28, 0x3F	; 63
 136:	dc e9       	ldi	r29, 0x9C	; 156
 138:	21 97       	sbiw	r28, 0x01	; 1
 13a:	f1 f7       	brne	.-4      	; 0x138 <main+0xcc>
 13c:	00 c0       	rjmp	.+0      	; 0x13e <main+0xd2>
 13e:	00 00       	nop
				_delay_ms(period);
				PORTD = 0x01;
 140:	52 bb       	out	0x12, r21	; 18
 142:	cf e3       	ldi	r28, 0x3F	; 63
 144:	dc e9       	ldi	r29, 0x9C	; 156
 146:	21 97       	sbiw	r28, 0x01	; 1
 148:	f1 f7       	brne	.-4      	; 0x146 <main+0xda>
 14a:	00 c0       	rjmp	.+0      	; 0x14c <main+0xe0>
 14c:	00 00       	nop
 14e:	01 97       	sbiw	r24, 0x01	; 1
		if (!(PIND & (1 << 5)))
		{
			PORTD = 0xF3;
			while (!(PIND & (1 << 5)));
			_delay_ms(period);
			for(int i = 0; i < 5; i++)
 150:	69 f6       	brne	.-102    	; 0xec <main+0x80>
				_delay_ms(period);
				PORTD = 0x01;
				_delay_ms(period);
			}
		}
		if (!(PIND & (1 << 6)))
 152:	86 99       	sbic	0x10, 6	; 16
 154:	9a cf       	rjmp	.-204    	; 0x8a <main+0x1e>
		{
			PORTD = 0xFC;
 156:	b2 bb       	out	0x12, r27	; 18
			while (!(PIND & (1 << 6)));
 158:	86 9b       	sbis	0x10, 6	; 16
 15a:	fe cf       	rjmp	.-4      	; 0x158 <main+0xec>
 15c:	8f e3       	ldi	r24, 0x3F	; 63
 15e:	9c e9       	ldi	r25, 0x9C	; 156
 160:	01 97       	sbiw	r24, 0x01	; 1
 162:	f1 f7       	brne	.-4      	; 0x160 <main+0xf4>
 164:	00 c0       	rjmp	.+0      	; 0x166 <main+0xfa>
 166:	00 00       	nop
 168:	85 e0       	ldi	r24, 0x05	; 5
 16a:	90 e0       	ldi	r25, 0x00	; 0
			_delay_ms(period);
			for(int i = 0; i < 5; i++)
			{
				PORTD = 0x02;
 16c:	62 bb       	out	0x12, r22	; 18
 16e:	cf e3       	ldi	r28, 0x3F	; 63
 170:	dc e9       	ldi	r29, 0x9C	; 156
 172:	21 97       	sbiw	r28, 0x01	; 1
 174:	f1 f7       	brne	.-4      	; 0x172 <main+0x106>
 176:	00 c0       	rjmp	.+0      	; 0x178 <main+0x10c>
 178:	00 00       	nop
				_delay_ms(period);
				PORTD = 0x03;
 17a:	22 bb       	out	0x12, r18	; 18
 17c:	cf e3       	ldi	r28, 0x3F	; 63
 17e:	dc e9       	ldi	r29, 0x9C	; 156
 180:	21 97       	sbiw	r28, 0x01	; 1
 182:	f1 f7       	brne	.-4      	; 0x180 <main+0x114>
 184:	00 c0       	rjmp	.+0      	; 0x186 <main+0x11a>
 186:	00 00       	nop
				_delay_ms(period);
				PORTD = 0x01;
 188:	52 bb       	out	0x12, r21	; 18
 18a:	cf e3       	ldi	r28, 0x3F	; 63
 18c:	dc e9       	ldi	r29, 0x9C	; 156
 18e:	21 97       	sbiw	r28, 0x01	; 1
 190:	f1 f7       	brne	.-4      	; 0x18e <main+0x122>
 192:	00 c0       	rjmp	.+0      	; 0x194 <main+0x128>
 194:	00 00       	nop
 196:	01 97       	sbiw	r24, 0x01	; 1
		if (!(PIND & (1 << 6)))
		{
			PORTD = 0xFC;
			while (!(PIND & (1 << 6)));
			_delay_ms(period);
			for(int i = 0; i < 5; i++)
 198:	49 f7       	brne	.-46     	; 0x16c <main+0x100>
 19a:	77 cf       	rjmp	.-274    	; 0x8a <main+0x1e>

0000019c <_exit>:
 19c:	f8 94       	cli

0000019e <__stop_program>:
 19e:	ff cf       	rjmp	.-2      	; 0x19e <__stop_program>
