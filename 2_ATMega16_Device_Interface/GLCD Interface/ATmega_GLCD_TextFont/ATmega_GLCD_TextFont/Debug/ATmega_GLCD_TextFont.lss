
ATmega_GLCD_TextFont.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000704  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000001e6  00800060  00000704  00000778  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000095e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000990  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000048  00000000  00000000  000009cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000a0f  00000000  00000000  00000a14  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006ed  00000000  00000000  00001423  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000004af  00000000  00000000  00001b10  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000e4  00000000  00000000  00001fc0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003f7  00000000  00000000  000020a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000438  00000000  00000000  0000249b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  000028d3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	12 e0       	ldi	r17, 0x02	; 2
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 e0       	ldi	r30, 0x04	; 4
  68:	f7 e0       	ldi	r31, 0x07	; 7
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a6 34       	cpi	r26, 0x46	; 70
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 45 02 	call	0x48a	; 0x48a <main>
  7a:	0c 94 80 03 	jmp	0x700	; 0x700 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <GLCD_Command>:

#define TotalPage			8

void GLCD_Command(char Command)		/* GLCD command function */
{
	Data_Port = Command;			/* Copy command on data pin */
  82:	8b bb       	out	0x1b, r24	; 27
	Command_Port &= ~(1 << RS);		/* Make RS LOW to select command register */
  84:	a8 98       	cbi	0x15, 0	; 21
	Command_Port &= ~(1 << RW);		/* Make RW LOW to select write operation */
  86:	a9 98       	cbi	0x15, 1	; 21
	Command_Port |=  (1 << EN);		/* Make HIGH to LOW transition on Enable pin */
  88:	aa 9a       	sbi	0x15, 2	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  8a:	8d e0       	ldi	r24, 0x0D	; 13
  8c:	8a 95       	dec	r24
  8e:	f1 f7       	brne	.-4      	; 0x8c <GLCD_Command+0xa>
  90:	00 00       	nop
	_delay_us(5);
	Command_Port &= ~(1 << EN);
  92:	aa 98       	cbi	0x15, 2	; 21
  94:	8d e0       	ldi	r24, 0x0D	; 13
  96:	8a 95       	dec	r24
  98:	f1 f7       	brne	.-4      	; 0x96 <GLCD_Command+0x14>
  9a:	00 00       	nop
  9c:	08 95       	ret

0000009e <GLCD_Data>:
	_delay_us(5);
}

void GLCD_Data(char Data)			/* GLCD data function */
{
	Data_Port = Data;				/* Copy data on data pin */
  9e:	8b bb       	out	0x1b, r24	; 27
	Command_Port |=  (1 << RS);		/* Make RS HIGH to select data register */
  a0:	a8 9a       	sbi	0x15, 0	; 21
	Command_Port &= ~(1 << RW);		/* Make RW LOW to select write operation */
  a2:	a9 98       	cbi	0x15, 1	; 21
	Command_Port |=  (1 << EN);		/* Make HIGH to LOW transition on Enable pin */
  a4:	aa 9a       	sbi	0x15, 2	; 21
  a6:	8d e0       	ldi	r24, 0x0D	; 13
  a8:	8a 95       	dec	r24
  aa:	f1 f7       	brne	.-4      	; 0xa8 <GLCD_Data+0xa>
  ac:	00 00       	nop
	_delay_us(5);
	Command_Port &= ~(1 << EN);
  ae:	aa 98       	cbi	0x15, 2	; 21
  b0:	8d e0       	ldi	r24, 0x0D	; 13
  b2:	8a 95       	dec	r24
  b4:	f1 f7       	brne	.-4      	; 0xb2 <GLCD_Data+0x14>
  b6:	00 00       	nop
  b8:	08 95       	ret

000000ba <GLCD_Init>:
	_delay_us(5);
}

void GLCD_Init()					/* GLCD initialize function */
{
	Data_Port_Dir = 0xFF;
  ba:	8f ef       	ldi	r24, 0xFF	; 255
  bc:	8a bb       	out	0x1a, r24	; 26
	Command_Port_Dir = 0xFF;
  be:	84 bb       	out	0x14, r24	; 20
	/* Select both left & right half of display & Keep reset pin high */
	Command_Port |= (1 << CS1) | (1 << CS2) | (1 << RST);
  c0:	85 b3       	in	r24, 0x15	; 21
  c2:	88 63       	ori	r24, 0x38	; 56
  c4:	85 bb       	out	0x15, r24	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  c6:	8f e3       	ldi	r24, 0x3F	; 63
  c8:	9c e9       	ldi	r25, 0x9C	; 156
  ca:	01 97       	sbiw	r24, 0x01	; 1
  cc:	f1 f7       	brne	.-4      	; 0xca <GLCD_Init+0x10>
  ce:	00 c0       	rjmp	.+0      	; 0xd0 <GLCD_Init+0x16>
  d0:	00 00       	nop
	_delay_ms(20);
	GLCD_Command(0x3E);				/* Display OFF */
  d2:	8e e3       	ldi	r24, 0x3E	; 62
  d4:	0e 94 41 00 	call	0x82	; 0x82 <GLCD_Command>
	GLCD_Command(0x40);				/* Set Y address (column=0) */
  d8:	80 e4       	ldi	r24, 0x40	; 64
  da:	0e 94 41 00 	call	0x82	; 0x82 <GLCD_Command>
	GLCD_Command(0xB8);				/* Set x address (page=0) */
  de:	88 eb       	ldi	r24, 0xB8	; 184
  e0:	0e 94 41 00 	call	0x82	; 0x82 <GLCD_Command>
	GLCD_Command(0xC0);				/* Set z address (start line=0) */
  e4:	80 ec       	ldi	r24, 0xC0	; 192
  e6:	0e 94 41 00 	call	0x82	; 0x82 <GLCD_Command>
	GLCD_Command(0x3F);				/* Display ON */
  ea:	8f e3       	ldi	r24, 0x3F	; 63
  ec:	0e 94 41 00 	call	0x82	; 0x82 <GLCD_Command>
  f0:	08 95       	ret

000000f2 <GLCD_ClearAll>:
}

void GLCD_ClearAll()				/* GLCD all display clear function */
{
  f2:	1f 93       	push	r17
  f4:	cf 93       	push	r28
  f6:	df 93       	push	r29
	int i,j;
	/* Select both left & right half of display */
	Command_Port |= (1 << CS1) | (1 << CS2);
  f8:	85 b3       	in	r24, 0x15	; 21
  fa:	88 61       	ori	r24, 0x18	; 24
  fc:	85 bb       	out	0x15, r24	; 21
  fe:	18 eb       	ldi	r17, 0xB8	; 184
	for(i = 0; i < TotalPage; i++)
	{
		GLCD_Command((0xB8) + i);	/* Increment page each time after 64 column */
 100:	81 2f       	mov	r24, r17
 102:	0e 94 41 00 	call	0x82	; 0x82 <GLCD_Command>
 106:	c0 e4       	ldi	r28, 0x40	; 64
 108:	d0 e0       	ldi	r29, 0x00	; 0
		for(j = 0; j < 64; j++)
		{
			GLCD_Data(0);			/* Write zeros to all 64 column */
 10a:	80 e0       	ldi	r24, 0x00	; 0
 10c:	0e 94 4f 00 	call	0x9e	; 0x9e <GLCD_Data>
 110:	21 97       	sbiw	r28, 0x01	; 1
	/* Select both left & right half of display */
	Command_Port |= (1 << CS1) | (1 << CS2);
	for(i = 0; i < TotalPage; i++)
	{
		GLCD_Command((0xB8) + i);	/* Increment page each time after 64 column */
		for(j = 0; j < 64; j++)
 112:	d9 f7       	brne	.-10     	; 0x10a <GLCD_ClearAll+0x18>
 114:	1f 5f       	subi	r17, 0xFF	; 255
void GLCD_ClearAll()				/* GLCD all display clear function */
{
	int i,j;
	/* Select both left & right half of display */
	Command_Port |= (1 << CS1) | (1 << CS2);
	for(i = 0; i < TotalPage; i++)
 116:	10 3c       	cpi	r17, 0xC0	; 192
 118:	99 f7       	brne	.-26     	; 0x100 <GLCD_ClearAll+0xe>
		for(j = 0; j < 64; j++)
		{
			GLCD_Data(0);			/* Write zeros to all 64 column */
		}
	}
	GLCD_Command(0x40);				/* Set Y address (column=0) */
 11a:	80 e4       	ldi	r24, 0x40	; 64
 11c:	0e 94 41 00 	call	0x82	; 0x82 <GLCD_Command>
	GLCD_Command(0xB8);				/* Set x address (page=0) */
 120:	88 eb       	ldi	r24, 0xB8	; 184
 122:	0e 94 41 00 	call	0x82	; 0x82 <GLCD_Command>
}
 126:	df 91       	pop	r29
 128:	cf 91       	pop	r28
 12a:	1f 91       	pop	r17
 12c:	08 95       	ret

0000012e <GLCD_String>:

void GLCD_String(char page_no, char *str)			/* GLCD string write function */
{
 12e:	2f 92       	push	r2
 130:	3f 92       	push	r3
 132:	4f 92       	push	r4
 134:	5f 92       	push	r5
 136:	6f 92       	push	r6
 138:	7f 92       	push	r7
 13a:	8f 92       	push	r8
 13c:	9f 92       	push	r9
 13e:	af 92       	push	r10
 140:	bf 92       	push	r11
 142:	cf 92       	push	r12
 144:	df 92       	push	r13
 146:	ef 92       	push	r14
 148:	ff 92       	push	r15
 14a:	0f 93       	push	r16
 14c:	1f 93       	push	r17
 14e:	cf 93       	push	r28
 150:	df 93       	push	r29
 152:	cd b7       	in	r28, 0x3d	; 61
 154:	de b7       	in	r29, 0x3e	; 62
 156:	28 97       	sbiw	r28, 0x08	; 8
 158:	0f b6       	in	r0, 0x3f	; 63
 15a:	f8 94       	cli
 15c:	de bf       	out	0x3e, r29	; 62
 15e:	0f be       	out	0x3f, r0	; 63
 160:	cd bf       	out	0x3d, r28	; 61
 162:	2b 01       	movw	r4, r22
	unsigned int i, column;
	unsigned int Page = ((0xB8) + page_no);
 164:	08 2f       	mov	r16, r24
 166:	10 e0       	ldi	r17, 0x00	; 0
 168:	c8 01       	movw	r24, r16
 16a:	88 54       	subi	r24, 0x48	; 72
 16c:	9f 4f       	sbci	r25, 0xFF	; 255
 16e:	6c 01       	movw	r12, r24
	unsigned int Y_address = 0;
	float Page_inc = 0.5;
	
	Command_Port |= (1 << CS1);						/* Select first Left half of display */
 170:	ab 9a       	sbi	0x15, 3	; 21
	Command_Port &= ~(1 << CS2);
 172:	ac 98       	cbi	0x15, 4	; 21
	
	GLCD_Command(Page);
 174:	0e 94 41 00 	call	0x82	; 0x82 <GLCD_Command>
	for(i = 0; str[i] != 0; i++)					/* Print each char in string till null */
 178:	f2 01       	movw	r30, r4
 17a:	90 81       	ld	r25, Z
 17c:	99 23       	and	r25, r25
 17e:	09 f4       	brne	.+2      	; 0x182 <GLCD_String+0x54>
 180:	68 c1       	rjmp	.+720    	; 0x452 <__LOCK_REGION_LENGTH__+0x52>
	{
		if (Y_address > (1024-(((page_no)*128)+FontWidth))) /* Check Whether Total Display get overflowed */
 182:	11 95       	neg	r17
 184:	01 95       	neg	r16
 186:	11 09       	sbc	r17, r1
 188:	16 95       	lsr	r17
 18a:	10 2f       	mov	r17, r16
 18c:	00 27       	eor	r16, r16
 18e:	17 95       	ror	r17
 190:	07 95       	ror	r16
 192:	98 01       	movw	r18, r16
 194:	25 50       	subi	r18, 0x05	; 5
 196:	3c 4f       	sbci	r19, 0xFC	; 252
 198:	3e 83       	std	Y+6, r19	; 0x06
 19a:	2d 83       	std	Y+5, r18	; 0x05
void GLCD_String(char page_no, char *str)			/* GLCD string write function */
{
	unsigned int i, column;
	unsigned int Page = ((0xB8) + page_no);
	unsigned int Y_address = 0;
	float Page_inc = 0.5;
 19c:	f1 2c       	mov	r15, r1
 19e:	e1 2c       	mov	r14, r1
 1a0:	81 2c       	mov	r8, r1
 1a2:	0f 2e       	mov	r0, r31
 1a4:	ff e3       	ldi	r31, 0x3F	; 63
 1a6:	9f 2e       	mov	r9, r31
 1a8:	f0 2d       	mov	r31, r0

void GLCD_String(char page_no, char *str)			/* GLCD string write function */
{
	unsigned int i, column;
	unsigned int Page = ((0xB8) + page_no);
	unsigned int Y_address = 0;
 1aa:	61 2c       	mov	r6, r1
 1ac:	71 2c       	mov	r7, r1
				{
					if (column == FontWidth)		/* Also check and break if it overflow after 5th column */
					break;
					GLCD_Command(0x40);				/* If not 5th and get overflowed then change Y address to START column */
					Y_address = Y_address + column;	/* Increment Y address count by column no. */
					Command_Port ^= (1 << CS1);		/* If yes then change segment controller to display on other half of display */
 1ae:	68 94       	set
 1b0:	33 24       	eor	r3, r3
 1b2:	33 f8       	bld	r3, 3
					Command_Port ^= (1 << CS2);
 1b4:	68 94       	set
 1b6:	22 24       	eor	r2, r2
 1b8:	24 f8       	bld	r2, 4
					GLCD_Command(Page + Page_inc);	/* Execute command for page change */
 1ba:	96 01       	movw	r18, r12
 1bc:	40 e0       	ldi	r20, 0x00	; 0
 1be:	50 e0       	ldi	r21, 0x00	; 0
 1c0:	29 83       	std	Y+1, r18	; 0x01
 1c2:	3a 83       	std	Y+2, r19	; 0x02
 1c4:	4b 83       	std	Y+3, r20	; 0x03
 1c6:	5c 83       	std	Y+4, r21	; 0x04
 1c8:	bf 2c       	mov	r11, r15
 1ca:	ae 2c       	mov	r10, r14
 1cc:	06 c0       	rjmp	.+12     	; 0x1da <GLCD_String+0xac>
	Command_Port &= ~(1 << CS2);
	
	GLCD_Command(Page);
	for(i = 0; str[i] != 0; i++)					/* Print each char in string till null */
	{
		if (Y_address > (1024-(((page_no)*128)+FontWidth))) /* Check Whether Total Display get overflowed */
 1ce:	4d 81       	ldd	r20, Y+5	; 0x05
 1d0:	5e 81       	ldd	r21, Y+6	; 0x06
 1d2:	46 15       	cp	r20, r6
 1d4:	57 05       	cpc	r21, r7
 1d6:	08 f4       	brcc	.+2      	; 0x1da <GLCD_String+0xac>
 1d8:	3c c1       	rjmp	.+632    	; 0x452 <__LOCK_REGION_LENGTH__+0x52>
		break;										/* If yes then break writing */
		if (str[i]!=32)								/* Check whether character is not a SPACE */
 1da:	90 32       	cpi	r25, 0x20	; 32
 1dc:	09 f4       	brne	.+2      	; 0x1e0 <GLCD_String+0xb2>
 1de:	45 c0       	rjmp	.+138    	; 0x26a <GLCD_String+0x13c>
 1e0:	01 e0       	ldi	r16, 0x01	; 1
 1e2:	10 e0       	ldi	r17, 0x00	; 0
		{
			for (column=1; column<=FontWidth; column++)
			{
				if ((Y_address+column)==(128*((int)(Page_inc+0.5))))	/* If yes then check whether it overflow from right side of display */
 1e4:	63 01       	movw	r12, r6
 1e6:	c0 0e       	add	r12, r16
 1e8:	d1 1e       	adc	r13, r17
 1ea:	20 e0       	ldi	r18, 0x00	; 0
 1ec:	30 e0       	ldi	r19, 0x00	; 0
 1ee:	40 e0       	ldi	r20, 0x00	; 0
 1f0:	5f e3       	ldi	r21, 0x3F	; 63
 1f2:	6b 2d       	mov	r22, r11
 1f4:	7a 2d       	mov	r23, r10
 1f6:	88 2d       	mov	r24, r8
 1f8:	99 2d       	mov	r25, r9
 1fa:	0e 94 50 02 	call	0x4a0	; 0x4a0 <__addsf3>
 1fe:	e6 2e       	mov	r14, r22
 200:	f7 2e       	mov	r15, r23
 202:	88 87       	std	Y+8, r24	; 0x08
 204:	9f 83       	std	Y+7, r25	; 0x07
 206:	0e 94 bc 02 	call	0x578	; 0x578 <__fixsfsi>
 20a:	76 95       	lsr	r23
 20c:	76 2f       	mov	r23, r22
 20e:	66 27       	eor	r22, r22
 210:	77 95       	ror	r23
 212:	67 95       	ror	r22
 214:	c6 16       	cp	r12, r22
 216:	d7 06       	cpc	r13, r23
 218:	11 f5       	brne	.+68     	; 0x25e <GLCD_String+0x130>
				{
					if (column == FontWidth)		/* Also check and break if it overflow after 5th column */
 21a:	05 30       	cpi	r16, 0x05	; 5
 21c:	11 05       	cpc	r17, r1
 21e:	29 f1       	breq	.+74     	; 0x26a <GLCD_String+0x13c>
					break;
					GLCD_Command(0x40);				/* If not 5th and get overflowed then change Y address to START column */
 220:	80 e4       	ldi	r24, 0x40	; 64
 222:	0e 94 41 00 	call	0x82	; 0x82 <GLCD_Command>
					Y_address = Y_address + column;	/* Increment Y address count by column no. */
					Command_Port ^= (1 << CS1);		/* If yes then change segment controller to display on other half of display */
 226:	85 b3       	in	r24, 0x15	; 21
 228:	83 25       	eor	r24, r3
 22a:	85 bb       	out	0x15, r24	; 21
					Command_Port ^= (1 << CS2);
 22c:	85 b3       	in	r24, 0x15	; 21
 22e:	82 25       	eor	r24, r2
 230:	85 bb       	out	0x15, r24	; 21
					GLCD_Command(Page + Page_inc);	/* Execute command for page change */
 232:	69 81       	ldd	r22, Y+1	; 0x01
 234:	7a 81       	ldd	r23, Y+2	; 0x02
 236:	8b 81       	ldd	r24, Y+3	; 0x03
 238:	9c 81       	ldd	r25, Y+4	; 0x04
 23a:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <__floatunsisf>
 23e:	2b 2d       	mov	r18, r11
 240:	3a 2d       	mov	r19, r10
 242:	48 2d       	mov	r20, r8
 244:	59 2d       	mov	r21, r9
 246:	0e 94 50 02 	call	0x4a0	; 0x4a0 <__addsf3>
 24a:	0e 94 c3 02 	call	0x586	; 0x586 <__fixunssfsi>
 24e:	86 2f       	mov	r24, r22
 250:	0e 94 41 00 	call	0x82	; 0x82 <GLCD_Command>
					Page_inc = Page_inc + 0.5;		/* Increment Page No. by half */
 254:	be 2c       	mov	r11, r14
 256:	af 2c       	mov	r10, r15
 258:	88 84       	ldd	r8, Y+8	; 0x08
 25a:	9f 80       	ldd	r9, Y+7	; 0x07
				if ((Y_address+column)==(128*((int)(Page_inc+0.5))))	/* If yes then check whether it overflow from right side of display */
				{
					if (column == FontWidth)		/* Also check and break if it overflow after 5th column */
					break;
					GLCD_Command(0x40);				/* If not 5th and get overflowed then change Y address to START column */
					Y_address = Y_address + column;	/* Increment Y address count by column no. */
 25c:	36 01       	movw	r6, r12
	{
		if (Y_address > (1024-(((page_no)*128)+FontWidth))) /* Check Whether Total Display get overflowed */
		break;										/* If yes then break writing */
		if (str[i]!=32)								/* Check whether character is not a SPACE */
		{
			for (column=1; column<=FontWidth; column++)
 25e:	0f 5f       	subi	r16, 0xFF	; 255
 260:	1f 4f       	sbci	r17, 0xFF	; 255
 262:	06 30       	cpi	r16, 0x06	; 6
 264:	11 05       	cpc	r17, r1
 266:	09 f0       	breq	.+2      	; 0x26a <GLCD_String+0x13c>
 268:	bd cf       	rjmp	.-134    	; 0x1e4 <GLCD_String+0xb6>
					GLCD_Command(Page + Page_inc);	/* Execute command for page change */
					Page_inc = Page_inc + 0.5;		/* Increment Page No. by half */
				}
			}
		}
		if (Y_address>(1024-(((page_no)*128)+FontWidth)))   /* Check Whether Total Display get overflowed */
 26a:	8d 81       	ldd	r24, Y+5	; 0x05
 26c:	9e 81       	ldd	r25, Y+6	; 0x06
 26e:	86 15       	cp	r24, r6
 270:	97 05       	cpc	r25, r7
 272:	08 f4       	brcc	.+2      	; 0x276 <GLCD_String+0x148>
 274:	ee c0       	rjmp	.+476    	; 0x452 <__LOCK_REGION_LENGTH__+0x52>
		break;										/* If yes then break writing */
		if((font[((str[i]-32)*FontWidth)+4])==0 || str[i]==32)/* Check whether character is SPACE or character last column is zero */
 276:	f2 01       	movw	r30, r4
 278:	20 81       	ld	r18, Z
 27a:	82 2f       	mov	r24, r18
 27c:	90 e0       	ldi	r25, 0x00	; 0
 27e:	80 97       	sbiw	r24, 0x20	; 32
 280:	ac 01       	movw	r20, r24
 282:	44 0f       	add	r20, r20
 284:	55 1f       	adc	r21, r21
 286:	44 0f       	add	r20, r20
 288:	55 1f       	adc	r21, r21
 28a:	84 0f       	add	r24, r20
 28c:	95 1f       	adc	r25, r21
 28e:	04 96       	adiw	r24, 0x04	; 4
 290:	ac 01       	movw	r20, r24
 292:	44 0f       	add	r20, r20
 294:	55 1f       	adc	r21, r21
 296:	44 0f       	add	r20, r20
 298:	55 1f       	adc	r21, r21
 29a:	84 0f       	add	r24, r20
 29c:	95 1f       	adc	r25, r21
 29e:	80 5a       	subi	r24, 0xA0	; 160
 2a0:	9f 4f       	sbci	r25, 0xFF	; 255
 2a2:	89 2b       	or	r24, r25
 2a4:	39 f0       	breq	.+14     	; 0x2b4 <GLCD_String+0x186>
 2a6:	20 32       	cpi	r18, 0x20	; 32
 2a8:	09 f0       	breq	.+2      	; 0x2ac <GLCD_String+0x17e>
 2aa:	51 c0       	rjmp	.+162    	; 0x34e <GLCD_String+0x220>
 2ac:	83 01       	movw	r16, r6
 2ae:	e1 2c       	mov	r14, r1
 2b0:	f1 2c       	mov	r15, r1
 2b2:	03 c0       	rjmp	.+6      	; 0x2ba <GLCD_String+0x18c>
 2b4:	83 01       	movw	r16, r6
 2b6:	e1 2c       	mov	r14, r1
 2b8:	f1 2c       	mov	r15, r1
		{
			for(column=0; column<FontWidth; column++)
			{
				GLCD_Data(font[str[i]-32][column]);	/* If yes then then print character */
 2ba:	f2 01       	movw	r30, r4
 2bc:	80 81       	ld	r24, Z
 2be:	90 e0       	ldi	r25, 0x00	; 0
 2c0:	80 97       	sbiw	r24, 0x20	; 32
 2c2:	fc 01       	movw	r30, r24
 2c4:	ee 0f       	add	r30, r30
 2c6:	ff 1f       	adc	r31, r31
 2c8:	ee 0f       	add	r30, r30
 2ca:	ff 1f       	adc	r31, r31
 2cc:	e8 0f       	add	r30, r24
 2ce:	f9 1f       	adc	r31, r25
 2d0:	ee 0d       	add	r30, r14
 2d2:	ff 1d       	adc	r31, r15
 2d4:	e0 5a       	subi	r30, 0xA0	; 160
 2d6:	ff 4f       	sbci	r31, 0xFF	; 255
 2d8:	80 81       	ld	r24, Z
 2da:	0e 94 4f 00 	call	0x9e	; 0x9e <GLCD_Data>
				if((Y_address+1)%64==0)				/* check whether it gets overflowed  from either half of side */
 2de:	0f 5f       	subi	r16, 0xFF	; 255
 2e0:	1f 4f       	sbci	r17, 0xFF	; 255
 2e2:	c8 01       	movw	r24, r16
 2e4:	8f 73       	andi	r24, 0x3F	; 63
 2e6:	99 27       	eor	r25, r25
 2e8:	89 2b       	or	r24, r25
 2ea:	29 f5       	brne	.+74     	; 0x336 <GLCD_String+0x208>
				{
					Command_Port ^= (1 << CS1);		/* If yes then change segment controller to display on other half of display */
 2ec:	85 b3       	in	r24, 0x15	; 21
 2ee:	83 25       	eor	r24, r3
 2f0:	85 bb       	out	0x15, r24	; 21
					Command_Port ^= (1 << CS2);
 2f2:	85 b3       	in	r24, 0x15	; 21
 2f4:	82 25       	eor	r24, r2
 2f6:	85 bb       	out	0x15, r24	; 21
					GLCD_Command((Page+Page_inc));	/* Execute command for page change */
 2f8:	69 81       	ldd	r22, Y+1	; 0x01
 2fa:	7a 81       	ldd	r23, Y+2	; 0x02
 2fc:	8b 81       	ldd	r24, Y+3	; 0x03
 2fe:	9c 81       	ldd	r25, Y+4	; 0x04
 300:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <__floatunsisf>
 304:	2b 2d       	mov	r18, r11
 306:	3a 2d       	mov	r19, r10
 308:	48 2d       	mov	r20, r8
 30a:	59 2d       	mov	r21, r9
 30c:	0e 94 50 02 	call	0x4a0	; 0x4a0 <__addsf3>
 310:	0e 94 c3 02 	call	0x586	; 0x586 <__fixunssfsi>
 314:	86 2f       	mov	r24, r22
 316:	0e 94 41 00 	call	0x82	; 0x82 <GLCD_Command>
					Page_inc = Page_inc + 0.5;		/* Increment Page No. by half */
 31a:	20 e0       	ldi	r18, 0x00	; 0
 31c:	30 e0       	ldi	r19, 0x00	; 0
 31e:	40 e0       	ldi	r20, 0x00	; 0
 320:	5f e3       	ldi	r21, 0x3F	; 63
 322:	6b 2d       	mov	r22, r11
 324:	7a 2d       	mov	r23, r10
 326:	88 2d       	mov	r24, r8
 328:	99 2d       	mov	r25, r9
 32a:	0e 94 50 02 	call	0x4a0	; 0x4a0 <__addsf3>
 32e:	b6 2e       	mov	r11, r22
 330:	a7 2e       	mov	r10, r23
 332:	88 2e       	mov	r8, r24
 334:	99 2e       	mov	r9, r25
		}
		if (Y_address>(1024-(((page_no)*128)+FontWidth)))   /* Check Whether Total Display get overflowed */
		break;										/* If yes then break writing */
		if((font[((str[i]-32)*FontWidth)+4])==0 || str[i]==32)/* Check whether character is SPACE or character last column is zero */
		{
			for(column=0; column<FontWidth; column++)
 336:	ff ef       	ldi	r31, 0xFF	; 255
 338:	ef 1a       	sub	r14, r31
 33a:	ff 0a       	sbc	r15, r31
 33c:	25 e0       	ldi	r18, 0x05	; 5
 33e:	e2 16       	cp	r14, r18
 340:	f1 04       	cpc	r15, r1
 342:	09 f0       	breq	.+2      	; 0x346 <GLCD_String+0x218>
 344:	ba cf       	rjmp	.-140    	; 0x2ba <GLCD_String+0x18c>
 346:	35 e0       	ldi	r19, 0x05	; 5
 348:	63 0e       	add	r6, r19
 34a:	71 1c       	adc	r7, r1
 34c:	7b c0       	rjmp	.+246    	; 0x444 <__LOCK_REGION_LENGTH__+0x44>
 34e:	83 01       	movw	r16, r6
 350:	e1 2c       	mov	r14, r1
 352:	f1 2c       	mov	r15, r1
		}
		else										/* If character is not SPACE or character last column is not zero */
		{
			for(column=0; column<FontWidth; column++)
			{
				GLCD_Data(font[str[i]-32][column]); /* Then continue to print hat char */
 354:	f2 01       	movw	r30, r4
 356:	80 81       	ld	r24, Z
 358:	90 e0       	ldi	r25, 0x00	; 0
 35a:	80 97       	sbiw	r24, 0x20	; 32
 35c:	fc 01       	movw	r30, r24
 35e:	ee 0f       	add	r30, r30
 360:	ff 1f       	adc	r31, r31
 362:	ee 0f       	add	r30, r30
 364:	ff 1f       	adc	r31, r31
 366:	e8 0f       	add	r30, r24
 368:	f9 1f       	adc	r31, r25
 36a:	ee 0d       	add	r30, r14
 36c:	ff 1d       	adc	r31, r15
 36e:	e0 5a       	subi	r30, 0xA0	; 160
 370:	ff 4f       	sbci	r31, 0xFF	; 255
 372:	80 81       	ld	r24, Z
 374:	0e 94 4f 00 	call	0x9e	; 0x9e <GLCD_Data>
				if((Y_address+1)%64==0)				/* check whether it gets overflowed  from either half of side */
 378:	0f 5f       	subi	r16, 0xFF	; 255
 37a:	1f 4f       	sbci	r17, 0xFF	; 255
 37c:	c8 01       	movw	r24, r16
 37e:	8f 73       	andi	r24, 0x3F	; 63
 380:	99 27       	eor	r25, r25
 382:	89 2b       	or	r24, r25
 384:	29 f5       	brne	.+74     	; 0x3d0 <GLCD_String+0x2a2>
				{
					Command_Port ^= (1 << CS1);		/* If yes then change segment controller to display on other half of display */
 386:	85 b3       	in	r24, 0x15	; 21
 388:	83 25       	eor	r24, r3
 38a:	85 bb       	out	0x15, r24	; 21
					Command_Port ^= (1 << CS2);
 38c:	85 b3       	in	r24, 0x15	; 21
 38e:	82 25       	eor	r24, r2
 390:	85 bb       	out	0x15, r24	; 21
					GLCD_Command((Page+Page_inc));	/* Execute command for page change */
 392:	69 81       	ldd	r22, Y+1	; 0x01
 394:	7a 81       	ldd	r23, Y+2	; 0x02
 396:	8b 81       	ldd	r24, Y+3	; 0x03
 398:	9c 81       	ldd	r25, Y+4	; 0x04
 39a:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <__floatunsisf>
 39e:	2b 2d       	mov	r18, r11
 3a0:	3a 2d       	mov	r19, r10
 3a2:	48 2d       	mov	r20, r8
 3a4:	59 2d       	mov	r21, r9
 3a6:	0e 94 50 02 	call	0x4a0	; 0x4a0 <__addsf3>
 3aa:	0e 94 c3 02 	call	0x586	; 0x586 <__fixunssfsi>
 3ae:	86 2f       	mov	r24, r22
 3b0:	0e 94 41 00 	call	0x82	; 0x82 <GLCD_Command>
					Page_inc = Page_inc + 0.5;		/* Increment Page No. by half */
 3b4:	20 e0       	ldi	r18, 0x00	; 0
 3b6:	30 e0       	ldi	r19, 0x00	; 0
 3b8:	40 e0       	ldi	r20, 0x00	; 0
 3ba:	5f e3       	ldi	r21, 0x3F	; 63
 3bc:	6b 2d       	mov	r22, r11
 3be:	7a 2d       	mov	r23, r10
 3c0:	88 2d       	mov	r24, r8
 3c2:	99 2d       	mov	r25, r9
 3c4:	0e 94 50 02 	call	0x4a0	; 0x4a0 <__addsf3>
 3c8:	b6 2e       	mov	r11, r22
 3ca:	a7 2e       	mov	r10, r23
 3cc:	88 2e       	mov	r8, r24
 3ce:	99 2e       	mov	r9, r25
				Y_address++;						/* Increment Y_address count per column */
			}
		}
		else										/* If character is not SPACE or character last column is not zero */
		{
			for(column=0; column<FontWidth; column++)
 3d0:	ff ef       	ldi	r31, 0xFF	; 255
 3d2:	ef 1a       	sub	r14, r31
 3d4:	ff 0a       	sbc	r15, r31
 3d6:	25 e0       	ldi	r18, 0x05	; 5
 3d8:	e2 16       	cp	r14, r18
 3da:	f1 04       	cpc	r15, r1
 3dc:	09 f0       	breq	.+2      	; 0x3e0 <GLCD_String+0x2b2>
 3de:	ba cf       	rjmp	.-140    	; 0x354 <GLCD_String+0x226>
					GLCD_Command((Page+Page_inc));	/* Execute command for page change */
					Page_inc = Page_inc + 0.5;		/* Increment Page No. by half */
				}
				Y_address++;						/* Increment Y_address count per column */
			}
			GLCD_Data(0);							/* Add one column of zero to print next character next of zero */
 3e0:	80 e0       	ldi	r24, 0x00	; 0
 3e2:	0e 94 4f 00 	call	0x9e	; 0x9e <GLCD_Data>
			Y_address++;							/* Increment Y_address count for last added zero */
 3e6:	36 e0       	ldi	r19, 0x06	; 6
 3e8:	63 0e       	add	r6, r19
 3ea:	71 1c       	adc	r7, r1
			if((Y_address)%64 == 0)					/* check whether it gets overflowed  from either half of side */
 3ec:	c3 01       	movw	r24, r6
 3ee:	8f 73       	andi	r24, 0x3F	; 63
 3f0:	99 27       	eor	r25, r25
 3f2:	89 2b       	or	r24, r25
 3f4:	39 f5       	brne	.+78     	; 0x444 <__LOCK_REGION_LENGTH__+0x44>
			{
				Command_Port ^= (1 << CS1);			/* If yes then change segment controller to display on other half of display */
 3f6:	85 b3       	in	r24, 0x15	; 21
 3f8:	83 25       	eor	r24, r3
 3fa:	85 bb       	out	0x15, r24	; 21
				Command_Port ^= (1 << CS2);
 3fc:	85 b3       	in	r24, 0x15	; 21
 3fe:	82 25       	eor	r24, r2
 400:	85 bb       	out	0x15, r24	; 21
				GLCD_Command((Page+Page_inc));		/* Execute command for page change */
 402:	69 81       	ldd	r22, Y+1	; 0x01
 404:	7a 81       	ldd	r23, Y+2	; 0x02
 406:	8b 81       	ldd	r24, Y+3	; 0x03
 408:	9c 81       	ldd	r25, Y+4	; 0x04
 40a:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <__floatunsisf>
 40e:	9b 01       	movw	r18, r22
 410:	ac 01       	movw	r20, r24
 412:	6b 2d       	mov	r22, r11
 414:	7a 2d       	mov	r23, r10
 416:	88 2d       	mov	r24, r8
 418:	99 2d       	mov	r25, r9
 41a:	0e 94 50 02 	call	0x4a0	; 0x4a0 <__addsf3>
 41e:	0e 94 c3 02 	call	0x586	; 0x586 <__fixunssfsi>
 422:	86 2f       	mov	r24, r22
 424:	0e 94 41 00 	call	0x82	; 0x82 <GLCD_Command>
				Page_inc = Page_inc + 0.5;			/* Increment Page No. by half */
 428:	20 e0       	ldi	r18, 0x00	; 0
 42a:	30 e0       	ldi	r19, 0x00	; 0
 42c:	40 e0       	ldi	r20, 0x00	; 0
 42e:	5f e3       	ldi	r21, 0x3F	; 63
 430:	6b 2d       	mov	r22, r11
 432:	7a 2d       	mov	r23, r10
 434:	88 2d       	mov	r24, r8
 436:	99 2d       	mov	r25, r9
 438:	0e 94 50 02 	call	0x4a0	; 0x4a0 <__addsf3>
 43c:	b6 2e       	mov	r11, r22
 43e:	a7 2e       	mov	r10, r23
 440:	88 2e       	mov	r8, r24
 442:	99 2e       	mov	r9, r25
	
	Command_Port |= (1 << CS1);						/* Select first Left half of display */
	Command_Port &= ~(1 << CS2);
	
	GLCD_Command(Page);
	for(i = 0; str[i] != 0; i++)					/* Print each char in string till null */
 444:	4f ef       	ldi	r20, 0xFF	; 255
 446:	44 1a       	sub	r4, r20
 448:	54 0a       	sbc	r5, r20
 44a:	f2 01       	movw	r30, r4
 44c:	90 81       	ld	r25, Z
 44e:	91 11       	cpse	r25, r1
 450:	be ce       	rjmp	.-644    	; 0x1ce <GLCD_String+0xa0>
				GLCD_Command((Page+Page_inc));		/* Execute command for page change */
				Page_inc = Page_inc + 0.5;			/* Increment Page No. by half */
			}
		}
	}
	GLCD_Command(0x40);								/* Set Y address (column=0) */
 452:	80 e4       	ldi	r24, 0x40	; 64
 454:	0e 94 41 00 	call	0x82	; 0x82 <GLCD_Command>
}
 458:	28 96       	adiw	r28, 0x08	; 8
 45a:	0f b6       	in	r0, 0x3f	; 63
 45c:	f8 94       	cli
 45e:	de bf       	out	0x3e, r29	; 62
 460:	0f be       	out	0x3f, r0	; 63
 462:	cd bf       	out	0x3d, r28	; 61
 464:	df 91       	pop	r29
 466:	cf 91       	pop	r28
 468:	1f 91       	pop	r17
 46a:	0f 91       	pop	r16
 46c:	ff 90       	pop	r15
 46e:	ef 90       	pop	r14
 470:	df 90       	pop	r13
 472:	cf 90       	pop	r12
 474:	bf 90       	pop	r11
 476:	af 90       	pop	r10
 478:	9f 90       	pop	r9
 47a:	8f 90       	pop	r8
 47c:	7f 90       	pop	r7
 47e:	6f 90       	pop	r6
 480:	5f 90       	pop	r5
 482:	4f 90       	pop	r4
 484:	3f 90       	pop	r3
 486:	2f 90       	pop	r2
 488:	08 95       	ret

0000048a <main>:

int main(void)
{
	GLCD_Init();									/* Initialize GLCD */
 48a:	0e 94 5d 00 	call	0xba	; 0xba <GLCD_Init>
	GLCD_ClearAll();								/* Clear all GLCD display */
 48e:	0e 94 79 00 	call	0xf2	; 0xf2 <GLCD_ClearAll>
	GLCD_String(0,"Atmel");							/* Print String on 0th page of display */
 492:	60 e4       	ldi	r22, 0x40	; 64
 494:	72 e0       	ldi	r23, 0x02	; 2
 496:	80 e0       	ldi	r24, 0x00	; 0
 498:	0e 94 97 00 	call	0x12e	; 0x12e <GLCD_String>
	while(1);
 49c:	ff cf       	rjmp	.-2      	; 0x49c <main+0x12>

0000049e <__subsf3>:
 49e:	50 58       	subi	r21, 0x80	; 128

000004a0 <__addsf3>:
 4a0:	bb 27       	eor	r27, r27
 4a2:	aa 27       	eor	r26, r26
 4a4:	0e 94 67 02 	call	0x4ce	; 0x4ce <__addsf3x>
 4a8:	0c 94 46 03 	jmp	0x68c	; 0x68c <__fp_round>
 4ac:	0e 94 38 03 	call	0x670	; 0x670 <__fp_pscA>
 4b0:	38 f0       	brcs	.+14     	; 0x4c0 <__addsf3+0x20>
 4b2:	0e 94 3f 03 	call	0x67e	; 0x67e <__fp_pscB>
 4b6:	20 f0       	brcs	.+8      	; 0x4c0 <__addsf3+0x20>
 4b8:	39 f4       	brne	.+14     	; 0x4c8 <__addsf3+0x28>
 4ba:	9f 3f       	cpi	r25, 0xFF	; 255
 4bc:	19 f4       	brne	.+6      	; 0x4c4 <__addsf3+0x24>
 4be:	26 f4       	brtc	.+8      	; 0x4c8 <__addsf3+0x28>
 4c0:	0c 94 35 03 	jmp	0x66a	; 0x66a <__fp_nan>
 4c4:	0e f4       	brtc	.+2      	; 0x4c8 <__addsf3+0x28>
 4c6:	e0 95       	com	r30
 4c8:	e7 fb       	bst	r30, 7
 4ca:	0c 94 2f 03 	jmp	0x65e	; 0x65e <__fp_inf>

000004ce <__addsf3x>:
 4ce:	e9 2f       	mov	r30, r25
 4d0:	0e 94 57 03 	call	0x6ae	; 0x6ae <__fp_split3>
 4d4:	58 f3       	brcs	.-42     	; 0x4ac <__addsf3+0xc>
 4d6:	ba 17       	cp	r27, r26
 4d8:	62 07       	cpc	r22, r18
 4da:	73 07       	cpc	r23, r19
 4dc:	84 07       	cpc	r24, r20
 4de:	95 07       	cpc	r25, r21
 4e0:	20 f0       	brcs	.+8      	; 0x4ea <__addsf3x+0x1c>
 4e2:	79 f4       	brne	.+30     	; 0x502 <__addsf3x+0x34>
 4e4:	a6 f5       	brtc	.+104    	; 0x54e <__addsf3x+0x80>
 4e6:	0c 94 79 03 	jmp	0x6f2	; 0x6f2 <__fp_zero>
 4ea:	0e f4       	brtc	.+2      	; 0x4ee <__addsf3x+0x20>
 4ec:	e0 95       	com	r30
 4ee:	0b 2e       	mov	r0, r27
 4f0:	ba 2f       	mov	r27, r26
 4f2:	a0 2d       	mov	r26, r0
 4f4:	0b 01       	movw	r0, r22
 4f6:	b9 01       	movw	r22, r18
 4f8:	90 01       	movw	r18, r0
 4fa:	0c 01       	movw	r0, r24
 4fc:	ca 01       	movw	r24, r20
 4fe:	a0 01       	movw	r20, r0
 500:	11 24       	eor	r1, r1
 502:	ff 27       	eor	r31, r31
 504:	59 1b       	sub	r21, r25
 506:	99 f0       	breq	.+38     	; 0x52e <__addsf3x+0x60>
 508:	59 3f       	cpi	r21, 0xF9	; 249
 50a:	50 f4       	brcc	.+20     	; 0x520 <__addsf3x+0x52>
 50c:	50 3e       	cpi	r21, 0xE0	; 224
 50e:	68 f1       	brcs	.+90     	; 0x56a <__addsf3x+0x9c>
 510:	1a 16       	cp	r1, r26
 512:	f0 40       	sbci	r31, 0x00	; 0
 514:	a2 2f       	mov	r26, r18
 516:	23 2f       	mov	r18, r19
 518:	34 2f       	mov	r19, r20
 51a:	44 27       	eor	r20, r20
 51c:	58 5f       	subi	r21, 0xF8	; 248
 51e:	f3 cf       	rjmp	.-26     	; 0x506 <__addsf3x+0x38>
 520:	46 95       	lsr	r20
 522:	37 95       	ror	r19
 524:	27 95       	ror	r18
 526:	a7 95       	ror	r26
 528:	f0 40       	sbci	r31, 0x00	; 0
 52a:	53 95       	inc	r21
 52c:	c9 f7       	brne	.-14     	; 0x520 <__addsf3x+0x52>
 52e:	7e f4       	brtc	.+30     	; 0x54e <__addsf3x+0x80>
 530:	1f 16       	cp	r1, r31
 532:	ba 0b       	sbc	r27, r26
 534:	62 0b       	sbc	r22, r18
 536:	73 0b       	sbc	r23, r19
 538:	84 0b       	sbc	r24, r20
 53a:	ba f0       	brmi	.+46     	; 0x56a <__addsf3x+0x9c>
 53c:	91 50       	subi	r25, 0x01	; 1
 53e:	a1 f0       	breq	.+40     	; 0x568 <__addsf3x+0x9a>
 540:	ff 0f       	add	r31, r31
 542:	bb 1f       	adc	r27, r27
 544:	66 1f       	adc	r22, r22
 546:	77 1f       	adc	r23, r23
 548:	88 1f       	adc	r24, r24
 54a:	c2 f7       	brpl	.-16     	; 0x53c <__addsf3x+0x6e>
 54c:	0e c0       	rjmp	.+28     	; 0x56a <__addsf3x+0x9c>
 54e:	ba 0f       	add	r27, r26
 550:	62 1f       	adc	r22, r18
 552:	73 1f       	adc	r23, r19
 554:	84 1f       	adc	r24, r20
 556:	48 f4       	brcc	.+18     	; 0x56a <__addsf3x+0x9c>
 558:	87 95       	ror	r24
 55a:	77 95       	ror	r23
 55c:	67 95       	ror	r22
 55e:	b7 95       	ror	r27
 560:	f7 95       	ror	r31
 562:	9e 3f       	cpi	r25, 0xFE	; 254
 564:	08 f0       	brcs	.+2      	; 0x568 <__addsf3x+0x9a>
 566:	b0 cf       	rjmp	.-160    	; 0x4c8 <__addsf3+0x28>
 568:	93 95       	inc	r25
 56a:	88 0f       	add	r24, r24
 56c:	08 f0       	brcs	.+2      	; 0x570 <__addsf3x+0xa2>
 56e:	99 27       	eor	r25, r25
 570:	ee 0f       	add	r30, r30
 572:	97 95       	ror	r25
 574:	87 95       	ror	r24
 576:	08 95       	ret

00000578 <__fixsfsi>:
 578:	0e 94 c3 02 	call	0x586	; 0x586 <__fixunssfsi>
 57c:	68 94       	set
 57e:	b1 11       	cpse	r27, r1
 580:	0c 94 7a 03 	jmp	0x6f4	; 0x6f4 <__fp_szero>
 584:	08 95       	ret

00000586 <__fixunssfsi>:
 586:	0e 94 5f 03 	call	0x6be	; 0x6be <__fp_splitA>
 58a:	88 f0       	brcs	.+34     	; 0x5ae <__fixunssfsi+0x28>
 58c:	9f 57       	subi	r25, 0x7F	; 127
 58e:	98 f0       	brcs	.+38     	; 0x5b6 <__fixunssfsi+0x30>
 590:	b9 2f       	mov	r27, r25
 592:	99 27       	eor	r25, r25
 594:	b7 51       	subi	r27, 0x17	; 23
 596:	b0 f0       	brcs	.+44     	; 0x5c4 <__fixunssfsi+0x3e>
 598:	e1 f0       	breq	.+56     	; 0x5d2 <__fixunssfsi+0x4c>
 59a:	66 0f       	add	r22, r22
 59c:	77 1f       	adc	r23, r23
 59e:	88 1f       	adc	r24, r24
 5a0:	99 1f       	adc	r25, r25
 5a2:	1a f0       	brmi	.+6      	; 0x5aa <__fixunssfsi+0x24>
 5a4:	ba 95       	dec	r27
 5a6:	c9 f7       	brne	.-14     	; 0x59a <__fixunssfsi+0x14>
 5a8:	14 c0       	rjmp	.+40     	; 0x5d2 <__fixunssfsi+0x4c>
 5aa:	b1 30       	cpi	r27, 0x01	; 1
 5ac:	91 f0       	breq	.+36     	; 0x5d2 <__fixunssfsi+0x4c>
 5ae:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__fp_zero>
 5b2:	b1 e0       	ldi	r27, 0x01	; 1
 5b4:	08 95       	ret
 5b6:	0c 94 79 03 	jmp	0x6f2	; 0x6f2 <__fp_zero>
 5ba:	67 2f       	mov	r22, r23
 5bc:	78 2f       	mov	r23, r24
 5be:	88 27       	eor	r24, r24
 5c0:	b8 5f       	subi	r27, 0xF8	; 248
 5c2:	39 f0       	breq	.+14     	; 0x5d2 <__fixunssfsi+0x4c>
 5c4:	b9 3f       	cpi	r27, 0xF9	; 249
 5c6:	cc f3       	brlt	.-14     	; 0x5ba <__fixunssfsi+0x34>
 5c8:	86 95       	lsr	r24
 5ca:	77 95       	ror	r23
 5cc:	67 95       	ror	r22
 5ce:	b3 95       	inc	r27
 5d0:	d9 f7       	brne	.-10     	; 0x5c8 <__fixunssfsi+0x42>
 5d2:	3e f4       	brtc	.+14     	; 0x5e2 <__fixunssfsi+0x5c>
 5d4:	90 95       	com	r25
 5d6:	80 95       	com	r24
 5d8:	70 95       	com	r23
 5da:	61 95       	neg	r22
 5dc:	7f 4f       	sbci	r23, 0xFF	; 255
 5de:	8f 4f       	sbci	r24, 0xFF	; 255
 5e0:	9f 4f       	sbci	r25, 0xFF	; 255
 5e2:	08 95       	ret

000005e4 <__floatunsisf>:
 5e4:	e8 94       	clt
 5e6:	09 c0       	rjmp	.+18     	; 0x5fa <__floatsisf+0x12>

000005e8 <__floatsisf>:
 5e8:	97 fb       	bst	r25, 7
 5ea:	3e f4       	brtc	.+14     	; 0x5fa <__floatsisf+0x12>
 5ec:	90 95       	com	r25
 5ee:	80 95       	com	r24
 5f0:	70 95       	com	r23
 5f2:	61 95       	neg	r22
 5f4:	7f 4f       	sbci	r23, 0xFF	; 255
 5f6:	8f 4f       	sbci	r24, 0xFF	; 255
 5f8:	9f 4f       	sbci	r25, 0xFF	; 255
 5fa:	99 23       	and	r25, r25
 5fc:	a9 f0       	breq	.+42     	; 0x628 <__floatsisf+0x40>
 5fe:	f9 2f       	mov	r31, r25
 600:	96 e9       	ldi	r25, 0x96	; 150
 602:	bb 27       	eor	r27, r27
 604:	93 95       	inc	r25
 606:	f6 95       	lsr	r31
 608:	87 95       	ror	r24
 60a:	77 95       	ror	r23
 60c:	67 95       	ror	r22
 60e:	b7 95       	ror	r27
 610:	f1 11       	cpse	r31, r1
 612:	f8 cf       	rjmp	.-16     	; 0x604 <__floatsisf+0x1c>
 614:	fa f4       	brpl	.+62     	; 0x654 <__floatsisf+0x6c>
 616:	bb 0f       	add	r27, r27
 618:	11 f4       	brne	.+4      	; 0x61e <__floatsisf+0x36>
 61a:	60 ff       	sbrs	r22, 0
 61c:	1b c0       	rjmp	.+54     	; 0x654 <__floatsisf+0x6c>
 61e:	6f 5f       	subi	r22, 0xFF	; 255
 620:	7f 4f       	sbci	r23, 0xFF	; 255
 622:	8f 4f       	sbci	r24, 0xFF	; 255
 624:	9f 4f       	sbci	r25, 0xFF	; 255
 626:	16 c0       	rjmp	.+44     	; 0x654 <__floatsisf+0x6c>
 628:	88 23       	and	r24, r24
 62a:	11 f0       	breq	.+4      	; 0x630 <__floatsisf+0x48>
 62c:	96 e9       	ldi	r25, 0x96	; 150
 62e:	11 c0       	rjmp	.+34     	; 0x652 <__floatsisf+0x6a>
 630:	77 23       	and	r23, r23
 632:	21 f0       	breq	.+8      	; 0x63c <__floatsisf+0x54>
 634:	9e e8       	ldi	r25, 0x8E	; 142
 636:	87 2f       	mov	r24, r23
 638:	76 2f       	mov	r23, r22
 63a:	05 c0       	rjmp	.+10     	; 0x646 <__floatsisf+0x5e>
 63c:	66 23       	and	r22, r22
 63e:	71 f0       	breq	.+28     	; 0x65c <__floatsisf+0x74>
 640:	96 e8       	ldi	r25, 0x86	; 134
 642:	86 2f       	mov	r24, r22
 644:	70 e0       	ldi	r23, 0x00	; 0
 646:	60 e0       	ldi	r22, 0x00	; 0
 648:	2a f0       	brmi	.+10     	; 0x654 <__floatsisf+0x6c>
 64a:	9a 95       	dec	r25
 64c:	66 0f       	add	r22, r22
 64e:	77 1f       	adc	r23, r23
 650:	88 1f       	adc	r24, r24
 652:	da f7       	brpl	.-10     	; 0x64a <__floatsisf+0x62>
 654:	88 0f       	add	r24, r24
 656:	96 95       	lsr	r25
 658:	87 95       	ror	r24
 65a:	97 f9       	bld	r25, 7
 65c:	08 95       	ret

0000065e <__fp_inf>:
 65e:	97 f9       	bld	r25, 7
 660:	9f 67       	ori	r25, 0x7F	; 127
 662:	80 e8       	ldi	r24, 0x80	; 128
 664:	70 e0       	ldi	r23, 0x00	; 0
 666:	60 e0       	ldi	r22, 0x00	; 0
 668:	08 95       	ret

0000066a <__fp_nan>:
 66a:	9f ef       	ldi	r25, 0xFF	; 255
 66c:	80 ec       	ldi	r24, 0xC0	; 192
 66e:	08 95       	ret

00000670 <__fp_pscA>:
 670:	00 24       	eor	r0, r0
 672:	0a 94       	dec	r0
 674:	16 16       	cp	r1, r22
 676:	17 06       	cpc	r1, r23
 678:	18 06       	cpc	r1, r24
 67a:	09 06       	cpc	r0, r25
 67c:	08 95       	ret

0000067e <__fp_pscB>:
 67e:	00 24       	eor	r0, r0
 680:	0a 94       	dec	r0
 682:	12 16       	cp	r1, r18
 684:	13 06       	cpc	r1, r19
 686:	14 06       	cpc	r1, r20
 688:	05 06       	cpc	r0, r21
 68a:	08 95       	ret

0000068c <__fp_round>:
 68c:	09 2e       	mov	r0, r25
 68e:	03 94       	inc	r0
 690:	00 0c       	add	r0, r0
 692:	11 f4       	brne	.+4      	; 0x698 <__fp_round+0xc>
 694:	88 23       	and	r24, r24
 696:	52 f0       	brmi	.+20     	; 0x6ac <__fp_round+0x20>
 698:	bb 0f       	add	r27, r27
 69a:	40 f4       	brcc	.+16     	; 0x6ac <__fp_round+0x20>
 69c:	bf 2b       	or	r27, r31
 69e:	11 f4       	brne	.+4      	; 0x6a4 <__fp_round+0x18>
 6a0:	60 ff       	sbrs	r22, 0
 6a2:	04 c0       	rjmp	.+8      	; 0x6ac <__fp_round+0x20>
 6a4:	6f 5f       	subi	r22, 0xFF	; 255
 6a6:	7f 4f       	sbci	r23, 0xFF	; 255
 6a8:	8f 4f       	sbci	r24, 0xFF	; 255
 6aa:	9f 4f       	sbci	r25, 0xFF	; 255
 6ac:	08 95       	ret

000006ae <__fp_split3>:
 6ae:	57 fd       	sbrc	r21, 7
 6b0:	90 58       	subi	r25, 0x80	; 128
 6b2:	44 0f       	add	r20, r20
 6b4:	55 1f       	adc	r21, r21
 6b6:	59 f0       	breq	.+22     	; 0x6ce <__fp_splitA+0x10>
 6b8:	5f 3f       	cpi	r21, 0xFF	; 255
 6ba:	71 f0       	breq	.+28     	; 0x6d8 <__fp_splitA+0x1a>
 6bc:	47 95       	ror	r20

000006be <__fp_splitA>:
 6be:	88 0f       	add	r24, r24
 6c0:	97 fb       	bst	r25, 7
 6c2:	99 1f       	adc	r25, r25
 6c4:	61 f0       	breq	.+24     	; 0x6de <__fp_splitA+0x20>
 6c6:	9f 3f       	cpi	r25, 0xFF	; 255
 6c8:	79 f0       	breq	.+30     	; 0x6e8 <__fp_splitA+0x2a>
 6ca:	87 95       	ror	r24
 6cc:	08 95       	ret
 6ce:	12 16       	cp	r1, r18
 6d0:	13 06       	cpc	r1, r19
 6d2:	14 06       	cpc	r1, r20
 6d4:	55 1f       	adc	r21, r21
 6d6:	f2 cf       	rjmp	.-28     	; 0x6bc <__fp_split3+0xe>
 6d8:	46 95       	lsr	r20
 6da:	f1 df       	rcall	.-30     	; 0x6be <__fp_splitA>
 6dc:	08 c0       	rjmp	.+16     	; 0x6ee <__fp_splitA+0x30>
 6de:	16 16       	cp	r1, r22
 6e0:	17 06       	cpc	r1, r23
 6e2:	18 06       	cpc	r1, r24
 6e4:	99 1f       	adc	r25, r25
 6e6:	f1 cf       	rjmp	.-30     	; 0x6ca <__fp_splitA+0xc>
 6e8:	86 95       	lsr	r24
 6ea:	71 05       	cpc	r23, r1
 6ec:	61 05       	cpc	r22, r1
 6ee:	08 94       	sec
 6f0:	08 95       	ret

000006f2 <__fp_zero>:
 6f2:	e8 94       	clt

000006f4 <__fp_szero>:
 6f4:	bb 27       	eor	r27, r27
 6f6:	66 27       	eor	r22, r22
 6f8:	77 27       	eor	r23, r23
 6fa:	cb 01       	movw	r24, r22
 6fc:	97 f9       	bld	r25, 7
 6fe:	08 95       	ret

00000700 <_exit>:
 700:	f8 94       	cli

00000702 <__stop_program>:
 702:	ff cf       	rjmp	.-2      	; 0x702 <__stop_program>
