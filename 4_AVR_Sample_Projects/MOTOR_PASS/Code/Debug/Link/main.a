;/*******************************************************
;This program was created by the CodeWizardAVR V3.32
;Automatic Program Generator
;© Copyright 1998-2017 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project : MOTOR_PASS
;Version : 1
;Date    : 14/11/2021
;Author  : nghia
;Company :
;Comments:
;
;
;Chip type               : ATmega16
;Program type            : Application
;AVR Core Clock frequency: 8.000000 MHz
;Memory model            : Small
;External RAM size       : 0
;Data Stack size         : 256
;*******************************************************/
;#include <mega16.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x40
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0xB0
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0xA0
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0xB0
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <delay.h>
;#include <stdint.h>
;#include <string.h>
;
;#include "Keypad.h"
;#include "EEP.h"
;
;// Alphanumeric LCD functions
;#include <alcd.h>
;
;/* Define Status of Program */
;#define     S_PASSWORD_CHEKING      0
;#define     S_MOTOR_RUN_MODE        1
;#define     S_CHANGE_PASSWORD       2
;
;/* Define Pin/Port */
;#define     Passing_BTN             PINC.6
;#define     Buzzer_BTN              PINC.7
;#define     MOTOR_BTN               PINC.4
;#define     Passing_LED             PORTC.5
;#define     Buzzer                  PORTA.3
;#define     MOTOR                   PORTA.0
;
;
;// Declare your global variables here
;extern uint8_t pass[6];
;extern uint8_t pass1[6];
;extern uint8_t pass2[6];
;extern uint8_t pass_md[6];
;extern uint8_t mk[6];
;volatile uint8_t status = S_PASSWORD_CHEKING;
;
;// External Interrupt 1 service routine
;interrupt [EXT_INT1] void ext_int1_isr(void)
; 0000 0039 {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 003A     // Jump to Change Password
; 0000 003B     if (status != S_MOTOR_RUN_MODE)
;PCODE: $0000000F VOL: 1
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
; 0000 003C     {
; 0000 003D         status = S_CHANGE_PASSWORD;
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 1
; 0000 003E     }
; 0000 003F }
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
;
;void main(void)
; 0000 0042 {
;PCODE: $00000018 VOL: 0
; 0000 0043 // Declare your local variables here
; 0000 0044 uint8_t count = 0;
; 0000 0045 uint8_t j = 0;
; 0000 0046 
; 0000 0047 // Input/Output Ports initialization
; 0000 0048 // Port A initialization
; 0000 0049 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=Out Bit2=In Bit1=In Bit0=Out
; 0000 004A DDRA=(0<<DDA7) | (0<<DDA6) | (0<<DDA5) | (0<<DDA4) | (1<<DDA3) | (0<<DDA2) | (0<<DDA1) | (1<<DDA0);
;	count -> R17
;	j -> R16
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
; 0000 004B // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=0 Bit2=T Bit1=T Bit0=0
; 0000 004C PORTA=(0<<PORTA7) | (0<<PORTA6) | (0<<PORTA5) | (0<<PORTA4) | (0<<PORTA3) | (0<<PORTA2) | (0<<PORTA1) | (0<<PORTA0);
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
; 0000 004D 
; 0000 004E // Port B initialization
; 0000 004F // Function: Bit7=Out Bit6=Out Bit5=Out Bit4=Out Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 0050 DDRB=(1<<DDB7) | (1<<DDB6) | (1<<DDB5) | (1<<DDB4) | (0<<DDB3) | (0<<DDB2) | (0<<DDB1) | (0<<DDB0);
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
; 0000 0051 // State: Bit7=0 Bit6=0 Bit5=0 Bit4=0 Bit3=P Bit2=P Bit1=P Bit0=P
; 0000 0052 PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (1<<PORTB3) | (1<<PORTB2) | (1<<PORTB1) | (1<<PORTB0);
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
; 0000 0053 
; 0000 0054 // Port C initialization
; 0000 0055 // Function: Bit7=In Bit6=In Bit5=Out Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 0056 DDRC=(0<<DDC7) | (0<<DDC6) | (1<<DDC5) | (0<<DDC4) | (0<<DDC3) | (0<<DDC2) | (0<<DDC1) | (0<<DDC0);
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
; 0000 0057 // State: Bit7=P Bit6=P Bit5=0 Bit4=P Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 0058 PORTC=(1<<PORTC7) | (1<<PORTC6) | (0<<PORTC5) | (1<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
; 0000 0059 
; 0000 005A // Port D initialization
; 0000 005B // Function: Bit7=Out Bit6=Out Bit5=Out Bit4=Out Bit3=In Bit2=Out Bit1=Out Bit0=Out
; 0000 005C DDRD=(1<<DDD7) | (1<<DDD6) | (1<<DDD5) | (1<<DDD4) | (0<<DDD3) | (1<<DDD2) | (1<<DDD1) | (1<<DDD0);
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
; 0000 005D // State: Bit7=0 Bit6=0 Bit5=0 Bit4=0 Bit3=P Bit2=0 Bit1=0 Bit0=0
; 0000 005E PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (1<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
; 0000 005F 
; 0000 0060 // Timer/Counter 0 initialization
; 0000 0061 // Clock source: System Clock
; 0000 0062 // Clock value: Timer 0 Stopped
; 0000 0063 // Mode: Normal top=0xFF
; 0000 0064 // OC0 output: Disconnected
; 0000 0065 TCCR0=(0<<WGM00) | (0<<COM01) | (0<<COM00) | (0<<WGM01) | (0<<CS02) | (0<<CS01) | (0<<CS00);
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
; 0000 0066 TCNT0=0x00;
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
; 0000 0067 OCR0=0x00;
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
; 0000 0068 
; 0000 0069 // Timer/Counter 1 initialization
; 0000 006A // Clock source: System Clock
; 0000 006B // Clock value: Timer1 Stopped
; 0000 006C // Mode: Normal top=0xFFFF
; 0000 006D // OC1A output: Disconnected
; 0000 006E // OC1B output: Disconnected
; 0000 006F // Noise Canceler: Off
; 0000 0070 // Input Capture on Falling Edge
; 0000 0071 // Timer1 Overflow Interrupt: Off
; 0000 0072 // Input Capture Interrupt: Off
; 0000 0073 // Compare A Match Interrupt: Off
; 0000 0074 // Compare B Match Interrupt: Off
; 0000 0075 TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (0<<WGM10);
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
; 0000 0076 TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (0<<CS12) | (0<<CS11) | (0<<CS10);
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
; 0000 0077 TCNT1H=0x00;
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
; 0000 0078 TCNT1L=0x00;
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
; 0000 0079 ICR1H=0x00;
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
; 0000 007A ICR1L=0x00;
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
; 0000 007B OCR1AH=0x00;
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
; 0000 007C OCR1AL=0x00;
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
; 0000 007D OCR1BH=0x00;
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
; 0000 007E OCR1BL=0x00;
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
; 0000 007F 
; 0000 0080 // Timer/Counter 2 initialization
; 0000 0081 // Clock source: System Clock
; 0000 0082 // Clock value: Timer2 Stopped
; 0000 0083 // Mode: Normal top=0xFF
; 0000 0084 // OC2 output: Disconnected
; 0000 0085 ASSR=0<<AS2;
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
; 0000 0086 TCCR2=(0<<PWM2) | (0<<COM21) | (0<<COM20) | (0<<CTC2) | (0<<CS22) | (0<<CS21) | (0<<CS20);
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
; 0000 0087 TCNT2=0x00;
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
; 0000 0088 OCR2=0x00;
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
; 0000 0089 
; 0000 008A // Timer(s)/Counter(s) Interrupt(s) initialization
; 0000 008B TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (0<<TOIE1) | (0<<OCIE0) | (0<<TOIE0);
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
; 0000 008C 
; 0000 008D // External Interrupt(s) initialization
; 0000 008E // INT0: Off
; 0000 008F // INT1: On
; 0000 0090 // INT1 Mode: Falling Edge
; 0000 0091 // INT2: Off
; 0000 0092 GICR|=(1<<INT1) | (0<<INT0) | (0<<INT2);
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
; 0000 0093 MCUCR=(1<<ISC11) | (0<<ISC10) | (0<<ISC01) | (0<<ISC00);
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
; 0000 0094 MCUCSR=(0<<ISC2);
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
; 0000 0095 GIFR=(1<<INTF1) | (0<<INTF0) | (0<<INTF2);
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
; 0000 0096 
; 0000 0097 // USART initialization
; 0000 0098 // USART disabled
; 0000 0099 UCSRB=(0<<RXCIE) | (0<<TXCIE) | (0<<UDRIE) | (0<<RXEN) | (0<<TXEN) | (0<<UCSZ2) | (0<<RXB8) | (0<<TXB8);
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
; 0000 009A 
; 0000 009B // Analog Comparator initialization
; 0000 009C // Analog Comparator: Off
; 0000 009D // The Analog Comparator's positive input is
; 0000 009E // connected to the AIN0 pin
; 0000 009F // The Analog Comparator's negative input is
; 0000 00A0 // connected to the AIN1 pin
; 0000 00A1 ACSR=(1<<ACD) | (0<<ACBG) | (0<<ACO) | (0<<ACI) | (0<<ACIE) | (0<<ACIC) | (0<<ACIS1) | (0<<ACIS0);
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
; 0000 00A2 SFIOR=(0<<ACME);
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
; 0000 00A3 
; 0000 00A4 // ADC initialization
; 0000 00A5 // ADC disabled
; 0000 00A6 ADCSRA=(0<<ADEN) | (0<<ADSC) | (0<<ADATE) | (0<<ADIF) | (0<<ADIE) | (0<<ADPS2) | (0<<ADPS1) | (0<<ADPS0);
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
; 0000 00A7 
; 0000 00A8 // SPI initialization
; 0000 00A9 // SPI disabled
; 0000 00AA SPCR=(0<<SPIE) | (0<<SPE) | (0<<DORD) | (0<<MSTR) | (0<<CPOL) | (0<<CPHA) | (0<<SPR1) | (0<<SPR0);
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
; 0000 00AB 
; 0000 00AC // TWI initialization
; 0000 00AD // TWI disabled
; 0000 00AE TWCR=(0<<TWEA) | (0<<TWSTA) | (0<<TWSTO) | (0<<TWEN) | (0<<TWIE);
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
; 0000 00AF 
; 0000 00B0 // Alphanumeric LCD initialization
; 0000 00B1 // Connections are specified in the
; 0000 00B2 // Project|Configure|C Compiler|Libraries|Alphanumeric LCD menu:
; 0000 00B3 // RS - PORTD Bit 0
; 0000 00B4 // RD - PORTD Bit 1
; 0000 00B5 // EN - PORTD Bit 2
; 0000 00B6 // D4 - PORTD Bit 4
; 0000 00B7 // D5 - PORTD Bit 5
; 0000 00B8 // D6 - PORTD Bit 6
; 0000 00B9 // D7 - PORTD Bit 7
; 0000 00BA // Characters/line: 16
; 0000 00BB lcd_init(16);
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
; 0000 00BC 
; 0000 00BD // Globally enable interrupts
; 0000 00BE #asm("sei")
;PCODE: $00000068 VOL: 0
; 0000 00BF 
; 0000 00C0 /* Setting up Default Pass at first */
; 0000 00C1 Read_Pass_fromEEP(pass);
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
; 0000 00C2 if (pass[0] > 9)
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
; 0000 00C3 {
; 0000 00C4     Write_Pass_toEEP(pass_md);
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
; 0000 00C5 }
; 0000 00C6 
; 0000 00C7 Read_Pass_fromEEP(pass_md);
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
; 0000 00C8 Assign_Pass(pass, pass_md);
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
; 0000 00C9 
; 0000 00CA /* Super Loop */
; 0000 00CB     while (1)
;PCODE: $00000077 VOL: 0
; 0000 00CC     {
; 0000 00CD         switch(status)
;PCODE: $00000078 VOL: 1
;PCODE: $00000079 VOL: 0
; 0000 00CE         {
; 0000 00CF             case S_PASSWORD_CHEKING:
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
; 0000 00D0             {
; 0000 00D1                 Read_Pass_fromEEP(pass);
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
; 0000 00D2                 Enter_Pass();
;PCODE: $0000007E VOL: 0
; 0000 00D3 
; 0000 00D4                 if( check(pass,mk) )
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
; 0000 00D5                 {
; 0000 00D6                     lcd_clear();
;PCODE: $00000085 VOL: 0
; 0000 00D7                     delay_ms(2);
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
; 0000 00D8 
; 0000 00D9                     lcd_gotoxy(0,1);
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
; 0000 00DA                     lcd_puts("Correct!") ;
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
; 0000 00DB 
; 0000 00DC                     status = S_MOTOR_RUN_MODE;
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 1
; 0000 00DD                     j = 0;
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
; 0000 00DE                 }
; 0000 00DF                 else
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
; 0000 00E0                 {
; 0000 00E1                     j++;
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
; 0000 00E2                     if(j>=3)    /* Fail pass > 3 times -> Warning */
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
; 0000 00E3                     {
; 0000 00E4                         lcd_clear();
;PCODE: $0000009B VOL: 0
; 0000 00E5                         delay_ms(2);
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
; 0000 00E6 
; 0000 00E7                         lcd_gotoxy(0,1);
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
; 0000 00E8                         lcd_puts("Warning...");
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
; 0000 00E9 
; 0000 00EA                         /* Buzzer ON in 10s to Warning */
; 0000 00EB                         j=0;
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
; 0000 00EC                         Buzzer = 1;
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
; 0000 00ED                         delay_ms(10000);
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
; 0000 00EE                         Buzzer = 0;
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
; 0000 00EF                     }
; 0000 00F0                     else    /* Fail pass < 3 times */
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
; 0000 00F1                     {
; 0000 00F2                         lcd_gotoxy(0,1);
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
; 0000 00F3                         lcd_puts("Error.Try again!");
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
; 0000 00F4                         for (count = 0; count < 2; count++)
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
; 0000 00F5                         {
; 0000 00F6                             Buzzer = 1;
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
; 0000 00F7                             delay_ms(200);
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
; 0000 00F8                             Buzzer = 0;
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
; 0000 00F9                             delay_ms(200);
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
; 0000 00FA                         }
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
; 0000 00FB                         lcd_clear();
;PCODE: $000000CF VOL: 0
; 0000 00FC                     }
;PCODE: $000000D0 VOL: 0
; 0000 00FD                 }
;PCODE: $000000D1 VOL: 0
; 0000 00FE                 break;
;PCODE: $000000D2 VOL: 0
; 0000 00FF             }
; 0000 0100             case S_MOTOR_RUN_MODE:
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
; 0000 0101             {
; 0000 0102                 if ( MOTOR_BTN == 0 )
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
; 0000 0103                 {
; 0000 0104                     delay_ms(20);
;PCODE: $000000D9 VOL: 0
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
; 0000 0105                     if ( MOTOR_BTN == 0 )
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 0
; 0000 0106                     {
; 0000 0107                         MOTOR = 1;      /* Run MOTOR */
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 0
; 0000 0108                         lcd_clear();
;PCODE: $000000E1 VOL: 0
; 0000 0109                         delay_ms(2);
;PCODE: $000000E2 VOL: 0
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
; 0000 010A                         lcd_puts("Motor is Running");
;PCODE: $000000E5 VOL: 0
;PCODE: $000000E6 VOL: 0
;PCODE: $000000E7 VOL: 0
; 0000 010B                     }
; 0000 010C                 }
;PCODE: $000000E8 VOL: 0
; 0000 010D                 if ( Passing_BTN == 0 )
;PCODE: $000000E9 VOL: 0
;PCODE: $000000EA VOL: 0
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
; 0000 010E                 {
; 0000 010F                     delay_ms(20);
;PCODE: $000000ED VOL: 0
;PCODE: $000000EE VOL: 0
;PCODE: $000000EF VOL: 0
; 0000 0110                     if ( Passing_BTN == 0 )
;PCODE: $000000F0 VOL: 0
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
; 0000 0111                     {
; 0000 0112                         /* Blink LED Passing */
; 0000 0113                         for (count = 0; count < 5; count++)
;PCODE: $000000F3 VOL: 0
;PCODE: $000000F4 VOL: 0
;PCODE: $000000F5 VOL: 0
;PCODE: $000000F6 VOL: 0
;PCODE: $000000F7 VOL: 0
;PCODE: $000000F8 VOL: 0
;PCODE: $000000F9 VOL: 0
;PCODE: $000000FA VOL: 0
;PCODE: $000000FB VOL: 0
; 0000 0114                         {
; 0000 0115                             Passing_LED = 1;
;PCODE: $000000FC VOL: 0
;PCODE: $000000FD VOL: 0
; 0000 0116                             delay_ms(200);
;PCODE: $000000FE VOL: 0
;PCODE: $000000FF VOL: 0
;PCODE: $00000100 VOL: 0
; 0000 0117                             Passing_LED = 0;
;PCODE: $00000101 VOL: 0
;PCODE: $00000102 VOL: 0
; 0000 0118                             delay_ms(200);
;PCODE: $00000103 VOL: 0
;PCODE: $00000104 VOL: 0
;PCODE: $00000105 VOL: 0
; 0000 0119                         }
;PCODE: $00000106 VOL: 0
;PCODE: $00000107 VOL: 0
;PCODE: $00000108 VOL: 0
;PCODE: $00000109 VOL: 0
;PCODE: $0000010A VOL: 0
; 0000 011A                     }
; 0000 011B                 }
;PCODE: $0000010B VOL: 0
; 0000 011C 
; 0000 011D                 if ( Buzzer_BTN == 0 )
;PCODE: $0000010C VOL: 0
;PCODE: $0000010D VOL: 0
;PCODE: $0000010E VOL: 0
;PCODE: $0000010F VOL: 0
; 0000 011E                 {
; 0000 011F                     delay_ms(20);
;PCODE: $00000110 VOL: 0
;PCODE: $00000111 VOL: 0
;PCODE: $00000112 VOL: 0
; 0000 0120                     if ( Buzzer_BTN == 0 )
;PCODE: $00000113 VOL: 0
;PCODE: $00000114 VOL: 0
;PCODE: $00000115 VOL: 0
; 0000 0121                     {
; 0000 0122                         /* BUZZER ON in 0,5s */
; 0000 0123                         Buzzer = 1;
;PCODE: $00000116 VOL: 0
;PCODE: $00000117 VOL: 0
; 0000 0124                         delay_ms(500);
;PCODE: $00000118 VOL: 0
;PCODE: $00000119 VOL: 0
; 0000 0125                         Buzzer = 0;
;PCODE: $0000011A VOL: 0
;PCODE: $0000011B VOL: 0
; 0000 0126                     }
; 0000 0127                 }
;PCODE: $0000011C VOL: 0
; 0000 0128                 break;
;PCODE: $0000011D VOL: 0
;PCODE: $0000011E VOL: 0
; 0000 0129             }
; 0000 012A             case S_CHANGE_PASSWORD:
;PCODE: $0000011F VOL: 0
;PCODE: $00000120 VOL: 0
;PCODE: $00000121 VOL: 0
; 0000 012B             {
; 0000 012C                 Change_Password();
;PCODE: $00000122 VOL: 0
; 0000 012D                 j = 0;
;PCODE: $00000123 VOL: 0
;PCODE: $00000124 VOL: 0
; 0000 012E                 status = S_PASSWORD_CHEKING;
;PCODE: $00000125 VOL: 0
;PCODE: $00000126 VOL: 1
; 0000 012F                 break;
;PCODE: $00000127 VOL: 0
; 0000 0130             }
; 0000 0131         }
;PCODE: $00000128 VOL: 0
; 0000 0132     }
;PCODE: $00000129 VOL: 0
;PCODE: $0000012A VOL: 0
; 0000 0133 }
;PCODE: $0000012B VOL: 0
;PCODE: $0000012C VOL: 0
;PCODE: $0000012D VOL: 0

	.DSEG
_0xD:
	.BYTE 0x36
;
